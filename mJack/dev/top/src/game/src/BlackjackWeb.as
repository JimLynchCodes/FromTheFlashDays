 package {	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.utils.Timer;	//import com.milkmangames.nativeextensions.*;	//import com.milkmangames.nativeextensions.events.*;		public class BlackjackWeb extends MovieClip {		// game objects		private var cash:int; // keep track of money		private var bet:int = 0; // this bet		private var deck:Array; // starts with all card values		private var playerHand:Array; // player's card values		private var dealerHand:Array; // dealer's card values		private var dealerCard:Cards; // reference to face-down card		private var cards:Array; // all cards, for clean-up		private var betDifference;		private var nextBet:int = 5;		private var hands:int = 1;		private var firstCardMod:int;		private var secondCardMod:int;		var playerFirstHand = new Array();		var playerSecondHand = new Array();		// timer for future events		private var timedEvents:Timer;		private var timedEventsList:Array;		private var AdMobBoolean:Boolean = true;		//----  timer set to this number at the beginnig --------		var nCount:Number = 100;				// set up buttons and deal first card		public function startBlackjack() {													// initial cash			cash = 500;			showCash();			cards = new Array();						// start game			createDeck();						// set up timed events list			timedEventsList = new Array();						// remove all buttons			removeChild(addBetButton);			removeChild(dealButton);			removeChild(hitButton);			removeChild(stayButton);			removeChild(continueButton);						// start first hand			startHand();			//if (AdMobBoolean == true) {				//AdMob.setVisibility(false);			//	AdMobBoolean = false;//				if(AdMob.isSupported) {//					AdMob.init("a150f1cd79a9680");//					AdMob.showAd(AdMobAdType.BANNER,AdMobAlignment.LEFT,AdMobAlignment.TOP,AdMob.getTestDeviceIDs());//					//AdMob.setVisibility(true);//				} //				else {//					trace("AdMob won't work on this platform!"); return;//				}						//if (AdMobBoolean == false) {				//AdMob.setVisibility(false);				//AdMobBoolean = true;			//}		}				// create a shuffled deck		private function createDeck() {			// create six ordered decks in an array			// using strings to represent card values			var suits:Array = ["c","d","s","h"];			var temp = new Array();			for (var i:int=0;i<6;i++) {				for(var suit:int=0;suit<4;suit++) {					for(var num:int=1;num<14;num++) {						temp.push(suits[suit]+num);					}				}			}					// pick random cards until deck has been shuffled			deck = new Array();			while (temp.length > 0) {				var r:int = Math.floor(Math.random()*temp.length);				deck.push(temp[r]);				temp.splice(r,1);			}		}		// init hand arrays and bet		private function startHand() {						// empty player and dealer hands			playerHand = new Array();			dealerHand = new Array();						//playerFourthHand = new Array();			playerValueDisplay.text = "";			dealerValueDisplay.text = "";						// start off each hand with smallest bet and deal card hidden			bet = nextBet;			showBet();			cash = cash - bet;			showCash();						// show buttons			addChild(addBetButton);			addChild(dealButton);			resultDisplay.text = "Waiting for Decision...";			trace(deck.length)			if (deck.length != 312) {				dealCards();			}		}		// allow the player to increase her bet up to $25		private function addToBet(e:MouseEvent) {						cash = cash - bet;			showCash();			bet += 5;			if (bet > 25) bet = 25; // limit bet			showBet();		}				// start checking every second for an event to play out		private function startTimedEvents() {			timedEvents = new Timer(250);			timedEvents.addEventListener(TimerEvent.TIMER, playTimedEvents);			timedEvents.start();		}				// done with events for now		private function stopTimedEvents() {			timedEvents.stop();			timedEvents.removeEventListener(TimerEvent.TIMER, playTimedEvents);			timedEvents = null;		}		// see if there is a new event in the list and do it		private function playTimedEvents(e:TimerEvent) {			var thisEvent = timedEventsList.shift();			if (thisEvent == "deal card to dealer") {				dealCard("dealer");			} else if (thisEvent == "deal card to player") {				dealCard("player");				showPlayerHandValue();			} else if (thisEvent == "end deal") {				if (!checkForBlackjack()) {					waitForHitOrStay();				}			} else if (thisEvent == "show dealer card") {				showDealerCard();			} else if (thisEvent == "dealer move") {				dealerMove();			}		}				// add an event to the list to be played out soon		private function addTimedEvent(eventString) {			timedEventsList.push(eventString);		}				// deal cards, triggered through continue button		private function dealCards() {									// add events to deal first cards			addTimedEvent("deal card to dealer");			addTimedEvent("deal card to player");			addTimedEvent("deal card to dealer");			addTimedEvent("deal card to player");			addTimedEvent("end deal");			startTimedEvents();					// switch buttons			//addChild(addBetButton);			removeChild(dealButton);		}		// deal inital cards in hard		private function dealFirstCards(e:MouseEvent) {			//------> sets up timer <-------------				var gameTimer:Timer = new Timer(1000, nCount);				timer_txt.text = nCount.toString();				gameTimer.start();				gameTimer.addEventListener(TimerEvent.TIMER, countdown);				function countdown(e:TimerEvent):void {					nCount--;					if (nCount == 0) {						var thisGameOverScreen:gameOverScreen = new gameOverScreen;						addChild(thisGameOverScreen)					}					timer_txt.text = nCount.toString();				}			//-----------------------------------------							// take bet away from player			//cash -= bet;			//showCash();						// add events to deal first cards			addTimedEvent("deal card to dealer");			addTimedEvent("deal card to player");			addTimedEvent("deal card to dealer");			addTimedEvent("deal card to player");			addTimedEvent("end deal");			startTimedEvents();					// switch buttons			//removeChild(addBetButton);			removeChild(dealButton);			removeChild(surrenderButton);		}		// take one card from the deck and give it to the player or dealer		private function dealCard(toWho) {						// get the next card from the deck			var newCardVal:String = deck.pop();						if (toWho == "player") {				// if it goes to the player, then show it and update hand value				playerHand.push(newCardVal);				showCard(newCardVal,"player");							} else {				// if it goes to the dealer, then show it, but only update hand value later				dealerHand.push(newCardVal);				showCard(newCardVal,"dealer");			}		}		// add a card object to the display		private function showCard(cardVal, whichHand) {						// get a new card			var newCard:Cards = new Cards();			newCard.gotoAndStop(cardVal);						// add the card			addChild(newCard);			cards.push(newCard);			// set the position of the new card			switch (whichHand) {				case "dealer":					var whichCard:int = dealerHand.length;					newCard.y = 300;					newCard.x = ((45 *whichCard) + 180);										if (dealerHand.length == 1) {						// show back for first dealer card						newCard.gotoAndStop("back");						dealerCard = newCard;					}				break;				case "player":					newCard.y = 450;					whichCard = playerHand.length;					newCard.y = newCard.y - (10 * whichCard- 10);					newCard.x = ((30 *whichCard) + 240);				break;				case "HandOneSplitToTwo":					newCard.y = 460;					newCard.x = 80 + (15*whichCard);					whichCard = playerHand.length;					newCard.y = newCard.y - (30 * whichCard- 10);				break;				case "HandTwoSplitToTwo":					newCard.y = 460;					newCard.x = 250 + (15 *whichCard) ;					whichCard = playerHand.length;					newCard.y = newCard.y - (30 * whichCard- 10);				break;			}			//newCard.y = -10*whichCard;														//newCard.y = -10*whichCard;						// add the card		//	addChild(newCard);		//	cards.push(newCard);		}				// time for player to make a decision		private function waitForHitOrStay() {			addChild(hitButton);			addChild(stayButton);			addChild(doubleButton);			addChild(splitButton);		// 	addChild(surrenderButton);			timedEvents.stop();		}				// player draws another card		private function hit(e:MouseEvent=null) {			dealCard("player");			showPlayerHandValue();					// if player gets 21 or more, go to dealer			if (handValue(playerHand) >= 21) stay();		}		private function split(e:MouseEvent=null) {			//-- remove old cards			//	removeChild(cards[0]);			//	removeChild(cards[2]);		//	if (number on card1 == number on card2) {			if  (hands == 1) {			   var splittingFirstCard:String = playerHand.pop();			   var splittingSecondCard:String = playerHand.pop();							playerFirstHand.push(splittingFirstCard);				showCard(splittingFirstCard,"HandOneSplitToTwo");								playerSecondHand.push(splittingSecondCard);				showCard(splittingSecondCard,"HandTwoSplitToTwo");				hands++			}		}		//		//		//   }		//	if (hands == 1) {		//		playerHand2 = new Array();		//	}		//	if (handValue(playerHand) >= 21) stay();		//	if (handValue(playerHand2) >= 21) stay();					private function double(e:MouseEvent=null) {			cash -= bet;			bet = bet * 2;			showCash();			showBet();			dealCard("player")			showPlayerHandValue();			removeChild(hitButton);			removeChild(stayButton);			removeChild(doubleButton);			removeChild(splitButton);			//removeChild(surrenderButton);			addTimedEvent("show dealer card");			addTimedEvent("dealer move");			startTimedEvents();	//		AdMob.setVisibility(false);		}		// player done, so show dealer's first card and continue		private function stay(e:MouseEvent=null) {			removeChild(hitButton);			removeChild(stayButton);			removeChild(doubleButton)			removeChild(splitButton);		//	removeChild(surrenderButton);						addTimedEvent("show dealer card");			addTimedEvent("dealer move");			startTimedEvents();		}		// player stays, so time to show dealer card and hand value so far		private function showDealerCard() {			dealerCard.gotoAndStop(dealerHand[0]);			showDealerHandValue();		}		// dealer gets a card		private function dealerMove() {			if (handValue(dealerHand) < 17) {				// dealer still doesn't have 17, so must continue to draw				dealCard("dealer");				showDealerHandValue();				addTimedEvent("dealer move");							} else {				// dealer is done				decideWinner();				stopTimedEvents();				showCash();				addChild(continueButton);			}		}		// calculate hand value		private function handValue(hand) {			var total:int = 0;			var ace:Boolean = false;					for(var i:int=0;i<hand.length;i++) {				// add value of card				var val:int = parseInt(hand[i].substr(1,2));						// jack, queen, and king = 10				if (val > 10) val = 10;				total += val;						// remember if an ace is found				if (val == 1) ace = true;			}					// ace can = 11 if it doesn't bust player			if ((ace) && (total <= 11)) total += 10;					return total;		}		// check to see whether either has blackjack		private function checkForBlackjack():Boolean {					// if player has blackjack			if ((playerHand.length == 2) && (handValue(playerHand) == 21)) {				// award 150 percent winnings				cash += bet*2.5;				bet = 0;				resultDisplay.text = "Blackjack!";				stopTimedEvents();				showCash();				showBet();				addChild(continueButton);				return true;			} else {				return false;			}		}		// see who won, or if there is a tie		private function decideWinner() {			var playerValue:int = handValue(playerHand);			var dealerValue:int = handValue(dealerHand);			if (playerValue > 21) {				resultDisplay.text = "You Busted!";				bet = 0;				showBet();				addChipsBack();			} else if (dealerValue > 21) {				cash += bet*2;				bet = 0;				showCash();				showBet();				resultDisplay.text = "Dealer Busts. You Win!";				addChipsBack();			} else if (dealerValue > playerValue) {				resultDisplay.text = "You Lose!";				bet = 0;				showBet();				addChipsBack();			} else if (dealerValue == playerValue) {				cash += bet;				bet = 0;				showCash();				showBet();				resultDisplay.text = "Tie!";				addChipsBack();			} else if (dealerValue < playerValue) {				cash += bet;				resultDisplay.text = "You Win!";				//bet = bet;				showCash();				showBet();				addChipsBack();			}		}		// start next hand		function newDeal(e:MouseEvent) {			removeChild(continueButton);			resetCards();						removeChild(FiveButtonOut);			removeChild(TwentyFiveButtonOut);			removeChild(FiftyButtonOut);			// if deck has less than 26 cards, reshuffle			if (deck.length < 26) {				createDeck();			} else {				startHand();			}		}				private function showPlayerHandValue() {			playerValueDisplay.text = handValue(playerHand);		}		private function showDealerHandValue() {			dealerValueDisplay.text = handValue(dealerHand);		}		// display cash with $		private function showCash() {			cashDisplay.text = "$"+cash;		}		// display bet with $		private function showBet() {			betDisplay.text = "$"+bet;		}		private function showNextBet() {			nextBetDisplay.text = "$"+ nextBet;					}		private function addChipsBack() {			addChild(FiveButtonOut);			addChild(TwentyFiveButtonOut);			addChild(FiftyButtonOut);		}		private function FiveChipClicked (e:MouseEvent) {			betDifference = bet - 5;			cash = cash + betDifference;			bet = 5;			showBet();			showCash();			nextBet = bet;			showNextBet();		}		private function TwentyFiveChipClicked (e:MouseEvent) {			switch (true) {				 case (bet > 25):					betDifference = bet - 25;					cash = cash + betDifference;					bet = 25;					showBet();					showCash();					nextBet = bet;					showNextBet();				break;				case (bet <= 25):					betDifference = 25 - bet;					cash = cash - betDifference;					bet = 25;					showBet();					showCash();					nextBet = bet;					showNextBet();				break;			}		}		private function FiftyChipClicked (e:MouseEvent) {								 if (bet > 50){					betDifference = bet - 50;					cash = cash + betDifference;					bet = 50;					showBet();					showCash();					nextBet = bet;					showNextBet();				}				if (bet <= 50) {					betDifference = 50 - bet;					cash = cash - betDifference;					bet = 50;					showBet();					showCash();					nextBet = bet;					showNextBet();				}		}		// remove cards from table		function resetCards() {			while(cards.length > 0) {				removeChild(cards.pop());			}		}	}}