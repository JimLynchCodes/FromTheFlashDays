package pre_game.src {		import com.greensock.TweenLite;		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.utils.Dictionary;		import org.osflash.signals.Signal;		import playerio.Client;	import playerio.Connection;	import playerio.PlayerIO;	import playerio.PlayerIOError;		import pre_game.src.helpers.PlayerioDbCall;	import pre_game.src.helpers.PlayerioMessageManager;	import pre_game.src.helpers.TextDisplayer;	import pre_game.src.model.PreGameModelo;
			public class PreGameMainNew extends MovieClip {				private var _preGameScreen:PreGameScreen;//		private var _imReadyBtn:MovieClip;		private var _startBtn:MovieClip;		private var _quitBtn:MovieClip;		private var _fader:MovieClip;		private var _classBtn4:MovieClip;		private var _classBtn3:MovieClip;		private var _classBtn2:MovieClip;		private var _classBtn1:MovieClip;		public var readySignal:Signal = new Signal();		private var _preGameModel:PreGameModelo;		public var classChangeSignal:Signal = new Signal();		private var _opClass1Btn:MovieClip;		private var _opClass2Btn:MovieClip;		private var _opClass3Btn:MovieClip;		private var _opClass4Btn:MovieClip;		private var _opClass5Btn:MovieClip;		private var _readyBtn:MovieClip;		private var _myPowerupBtn1:MovieClip;		private var _myPowerupBtn2:MovieClip;		private var _myPowerupBtn3:MovieClip;		private var _opponentPowerup1:MovieClip;		private var _opponentPowerup2:MovieClip;		private var _opponentPowerup3:MovieClip;		private var _powerupDisplayController:PowerupDisplayController;		private var _stage:Object;		private var _opponentInitialName:String;		private var _myInitialName:String;		private var _messageManager:PlayerioMessageManager;		private var _dbCaller:PlayerioDbCall;		private var _textDisplayer:TextDisplayer;		private var _pioClient:Client;		private var _classBtn5:MovieClip;		private var _cancelBtn:MovieClip;		private var _waitingForOpponentToTF:TextField;		private var _connection:Connection;		private var _opponentIsReadyTF:TextField;		private var _waitingForOpponentToStartTF:TextField;		private var _opponentIWantsToStartTF:TextField;		private var _opponentReturnedToClassSelectTF:TextField;						public function PreGameMainNew($stage:Object = null, myName:String = null, opponentName:String = null) 		{			if (!$stage) {				_stage = $stage;			}			else {				_stage = stage			}												init();			trace("stage " + _stage);		}				private function init():void		{			trace("init pre game")							CONFIG::IN_FLASH_PROFESSIONAL			{				trace("we in that Flash Bio!");					}						CONFIG::IN_FLASH_BUILDER			{				trace("woahthere boy");			}						assignVars();			addListeners();											//	_preGameModel.preGameMainClass = this;			beginPlayerIoLogin();		}		private function beginPlayerIoLogin():void		{			var authDictionary:Dictionary = new Dictionary();					authDictionary["userId"] = _preGameModel.myName;			authDictionary["password"] = _preGameModel.myPass;											PlayerIO.authenticate(stage,			"mjack-dev-jxmuuaa4j0ofwnvniaq",            			"public",                             	    			authDictionary,        									null,                    								onAuthenticate,											onAuthenticationFail);		}				private function onAuthenticationFail(error:PlayerIOError):void		{			trace("authentication error " + error);		}				private function onAuthenticate(client:Client):void		{			_pioClient = client;			_dbCaller = PlayerioDbCall.getInstance(_pioClient, _preGameScreen);						trace("in authenticate " + _preGameModel.opponentName);						client.multiplayer.developmentServer = "127.0.0.1:8184";						trace("authenticated " + client.multiplayer, client.connectUserId);						var roomString:String = "room 15";						client.multiplayer.createJoinRoom(				roomString,                   //Join service room				"PreGameRoom",                       //Type of room				false,                              //Invisible				null,                               //No room data				null,    				onRoomJoined,				onRoomJoinFail				);					}				private function onRoomJoined(connection:Connection):void		{			_messageManager = PlayerioMessageManager.getInstance(connection);////					_connection = connection;			trace("connected: " + connection);						trace("bajinga" + _preGameModel.opponentName);						_dbCaller.pullPlayerInfo(_preGameModel.myName)			_dbCaller.pullPlayerInfo(_preGameModel.opponentName)		}		//		private function onMessageReceived(m:Message):void//		{//			trace("oh boy, I got a message!  " + m);//			_messageController.handleMessage(m)/*			switch(m)*{*case opponentChoseClass*displayOpponentsClass(params)*break**case opponentIsReady**case opponentWantsToStart**case opponentCancelled**case opponentWantsToStartCancelled******}*///		}				private function onRoomJoinFail(error:PlayerIOError):void		{			trace("room join error " + error);			// TODO			// displayErrorPopup();   -that goes back to lobby		}		private function assignVars():void		{						_preGameModel = PreGameModelo.getInstance();						CONFIG::IN_FLASH_PROFESSIONAL				{										_myInitialName = "phillip";					_opponentInitialName = "simplePhillip";					_preGameModel.myName = "phillip"					_preGameModel.opponentName = "simplePhillip";					_preGameModel.myPass = "poop";					_preGameScreen = this["preGameScreen"];				}								CONFIG::IN_FLASH_BUILDER				{										_myInitialName = "simplePhillip";					_opponentInitialName = "phillip";					_preGameModel.myName = "simplePhillip"					_preGameModel.opponentName = "phillip";					_preGameModel.myPass = "test";					_preGameScreen = new PreGameScreen();					_stage.addChild(_preGameScreen);															}									_quitBtn = _preGameScreen["quitBtn"];			trace("quite btn " + _quitBtn);			_fader = _preGameScreen["fader"];			_classBtn1 = _preGameScreen["classBtn1"];			_classBtn2 = _preGameScreen["classBtn2"];			_classBtn3 = _preGameScreen["classBtn3"];			_classBtn4 = _preGameScreen["classBtn4"];			_classBtn5 = _preGameScreen["classBtn5"];						_waitingForOpponentToStartTF = _preGameScreen["waitingForOpponentToStartTF"];			_waitingForOpponentToStartTF.visible = false;						_classBtn1["classTxt"].mouseEnabled = false;			_classBtn1.mouseChildren = false;			_classBtn2.mouseChildren = false;			_classBtn2["classTxt"].mouseEnabled = false;			_classBtn3.mouseChildren = false;			_classBtn3["classTxt"].mouseEnabled = false;			_classBtn4.mouseChildren = false;			_classBtn4["classTxt"].mouseEnabled = false;			_classBtn5.mouseChildren = false;			_classBtn5["classTxt"].mouseEnabled = false;							_classBtn1["classTxt"].text = "Class1";			_classBtn2["classTxt"].text = "Class2";			_classBtn3["classTxt"].text = "Class3";			_classBtn4["classTxt"].text = "Class4";			_classBtn5["classTxt"].text = "Class5";									_cancelBtn = _preGameScreen["cancelBtn"];			_cancelBtn.buttonMode = true;			_cancelBtn.visible = false;						_opponentIWantsToStartTF = _preGameScreen["opponentIWantsToStartTF"];			//			_classBtn1.gotoAndPlay("off");//			_classBtn6 = _preGameScreen["classBtn6"];						_waitingForOpponentToTF = _preGameScreen["waitingForOpponentToTxt"];			_waitingForOpponentToTF.visible = false;			_waitingForOpponentToTF.text = "Waiting for Opponent to Click Ready...";					//	_opponentIsReadyTF = _preGameScreen["opponentIsReadyTF"];		//	_startBtn = _preGameScreen["startBtn"];		//	_waitingForOpponentToTF = _preGameScreen["waitingForOpponentToTxt"];						_myPowerupBtn1 = _preGameScreen["myPowerup1"];			_myPowerupBtn2 = _preGameScreen["myPowerup2"];			_myPowerupBtn3 = _preGameScreen["myPowerup3"];			_opponentPowerup1 = _preGameScreen["opponentPowerup1"];			_opponentPowerup2 = _preGameScreen["opponentPowerup2"];			_opponentPowerup3 = _preGameScreen["opponentPowerup3"];			_opponentReturnedToClassSelectTF = _preGameScreen["opponentReturnedToClassSelectTF"];						trace("_opponentPowerup1 " + _opponentPowerup1);						_opClass1Btn = _preGameScreen["opClassBtn1"];//			_opClass1Btn.alpha = 0;			_opClass2Btn = _preGameScreen["opClassBtn2"];//			_opClass2Btn.alpha = 0;			_opClass3Btn = _preGameScreen["opClassBtn3"];//			_opClass3Btn.alpha = 0;			_opClass4Btn = _preGameScreen["opClassBtn4"];//			_opClass4Btn.alpha = 0;			_opClass5Btn = _preGameScreen["opClassBtn5"];//			_opClass5Btn.alpha = 0;						_opClass1Btn["classTxt"].text = "Class 1";			_opClass2Btn["classTxt"].text = "Class 2";			_opClass3Btn["classTxt"].text = "Class 3";			_opClass4Btn["classTxt"].text = "Class 4";			_opClass5Btn["classTxt"].text = "Class 5";						_opClass1Btn["classTxt"].mouseEnabled = false;			_opClass2Btn["classTxt"].mouseEnabled = false;			_opClass3Btn["classTxt"].mouseEnabled = false;			_opClass4Btn["classTxt"].mouseEnabled = false;			_opClass5Btn["classTxt"].mouseEnabled = false;						_opponentIsReadyTF = _preGameScreen["opponentIsReadyTF"];			_opponentIsReadyTF.visible = false;						_readyBtn = _preGameScreen["readyBtn"];			_readyBtn.alpha = 0;						_startBtn = _preGameScreen["startBtn"];			_startBtn.alpha = 0;									_powerupDisplayController = PowerupDisplayController.getInstance();			_powerupDisplayController.setPowMovieClips(_preGameScreen, _myPowerupBtn1, _myPowerupBtn2, _myPowerupBtn3, 				_opponentPowerup1, _opponentPowerup2, _opponentPowerup3);																trace("main 0 " + _preGameScreen);				_textDisplayer = TextDisplayer.getInstance(_preGameScreen);									trace("fade the fader");			_fader.alpha = 0;						_classBtn1.buttonMode = true;			_classBtn2.buttonMode = true;			_classBtn3.buttonMode = true;			_classBtn4.buttonMode = true;			_classBtn5.buttonMode = true;//			_classBtn6.buttonMode = true;//			_imReadyBtn.visible = false;						_startBtn.buttonMode = true;			_quitBtn.buttonMode = true;//			_imReadyBtn.buttonMode = true;						_readyBtn.buttonMode = true;						_myPowerupBtn1.buttonMode = true;			_myPowerupBtn2.buttonMode = true;			_myPowerupBtn3.buttonMode = true;						_myPowerupBtn1.alpha = 0;			_myPowerupBtn2.alpha = 0;			_myPowerupBtn3.alpha = 0;			_opponentPowerup1.alpha = 0;			_opponentPowerup2.alpha = 0;			_opponentPowerup3.alpha = 0;//			classButtonClicked								}				private function onReady(passed:String):void		{			// TODO Auto Generated method stub//			trace("IIIIIIIIIm ready" + passed);														}								private function addListeners():void		{			// TODO Auto Generated method stub			_quitBtn.addEventListener(MouseEvent.CLICK, onQuitBtnClick);			_readyBtn.addEventListener(MouseEvent.CLICK, onImReadyBtnlick);			_startBtn.addEventListener(MouseEvent.CLICK, onStartBtnClick);//			_fader.addEventListener(MouseEvent.CLICK, onStartBtnClick);			_fader.mouseEnabled = false;						_classBtn1.addEventListener(MouseEvent.CLICK, onClassBtnClick);			_classBtn2.addEventListener(MouseEvent.CLICK, onClassBtnClick);			_classBtn3.addEventListener(MouseEvent.CLICK, onClassBtnClick);			_classBtn4.addEventListener(MouseEvent.CLICK, onClassBtnClick);			_classBtn5.addEventListener(MouseEvent.CLICK, onClassBtnClick);//			_classBtn6.addEventListener(MouseEvent.CLICK, onClassBtnClick);			//			_class1Btn.addEventListener( MouseEvent.CLICK, onClassBtnClick);//			_class2Btn.addEventListener( MouseEvent.CLICK, onClassBtnClick);//			_class3Btn.addEventListener( MouseEvent.CLICK, onClassBtnClick);//			_class4Btn.addEventListener( MouseEvent.CLICK, onClassBtnClick);//			_class5Btn.addEventListener( MouseEvent.CLICK, onClassBtnClick);						_cancelBtn.addEventListener(MouseEvent.CLICK, onCancelBtnClick);			readySignal.add(onReady);			classChangeSignal.add(onClassChange);		}				protected function onCancelBtnClick(event:MouseEvent):void
		{//			if (_preGameModel.iWantToStart)//			{//				_preGameModel.iWantToStart = false;//				_readyBtn.visible = false;//			}//			else//			{					_opponentIWantsToStartTF.visible = false;									if (_preGameModel.opponentWantsToStart) {					_preGameModel.opponentWantsToStart = false;					_waitingForOpponentToTF.visible = false;					_opponentIsReadyTF.visible = false;									}								_preGameModel.opponentIsReady = false;				_preGameModel.opponentWantsToStart = false;				_preGameModel.imReady = false;				_preGameModel.iWantToStart = false;				_cancelBtn.visible = false;				_readyBtn.visible = true;				_readyBtn.alpha = 1;				_startBtn.alpha = 0;				_waitingForOpponentToTF.visible = false;				_opponentIWantsToStartTF.visible = false;				_waitingForOpponentToStartTF.visible = false;				//			}
									_connection.send("USER_READY_CANCEL_CHOSEN");			
		}				private function onClassChange(newClass:String):void		{			// TODO Auto Generated method stub			trace("new class " + newClass);						switch(newClass)			{				case "classBtn1"://					_imReadyBtn.visible = true;					break;			}		}				protected function onClassBtnClick(event:MouseEvent):void		{									if (!_preGameModel.imReady)			{								var btnName:String = event.target.name;				trace("class btn clicked " + btnName);				_preGameModel.myClassChosen = btnName;												_connection.send("USER_CLASS_CHOSEN", btnName);								turnOffClassButtons();												event.target.gotoAndPlay("select");				//			TODO				//			_soundManager.playSound(classButtonClicked)				//			display powerups chosen
				
				//		event.target.gotoAndPlay("on");				
				trace("event target" + event.target + " current target " + event.currentTarget);
				
				//			MovieClip(event.target).gotoAndPlay("off");
								trace("clicked class btn " + btnName)				switch(btnName)				{					case "class1":												break;				}								//			TODO:				//			playerIOManager.sendClassChoice(event.target.name)								beginShowingPowerups(); 								_readyBtn.visible = true;				TweenLite.to(_readyBtn, 0.5, {alpha:1});								_powerupDisplayController.displayPowerups("mine");			}		}				private function turnOffClassButtons():void
		{
			_classBtn1.gotoAndPlay("nan");
			_classBtn2.gotoAndPlay("nan");
			_classBtn3.gotoAndPlay("nan");
			_classBtn4.gotoAndPlay("nan");
			_classBtn5.gotoAndPlay("nan");
		}				private function beginShowingPowerups():void
		{
//			TweenLite.delayedCall(10, showFirstPowerup);
			//TweenLite.delayedCall(100, showSecondPowerup);
			//TweenLite.delayedCall(300, showThirdPowerup);			//			TweenMax.delayedCall(20,showFirstPowerup);
		}		
		private function showFirstPowerup():void
		{
			// TODO Auto Generated method stub
//			TweenMax.to(_myPowerupBtn1, 2, {alpha:1});			//_myPowerupBtn1.gotoAndPlay("on");
		}
		
//		private function showSecondPowerup(params:Array):void
//		{
//			// TODO Auto Generated method stub
//			_myPowerupBtn2.gotoAndPlay("on");
//			
//		}
//		
//		private function showThirdPowerup(params:Array):void
//		{
//			// TODO Auto Generated method stub
//			_myPowerupBtn2.gotoAndPlay("on");
//			
//		}
				protected function onStartBtnClick(event:MouseEvent):void		{			// TODO Auto-generated method stub			trace("start clicked");			_connection.send("USER_WANTS_TO_START_CHOSEN");			_startBtn.visible = false;			_preGameModel.iWantToStart = true;						if (_preGameModel.opponentWantsToStart)			{				_waitingForOpponentToStartTF.visible = false;				TweenLite.to(_fader, 2, {alpha:1});			}			else			{				_waitingForOpponentToStartTF.visible = true			}																	}				protected function onImReadyBtnlick(event:MouseEvent):void		{			trace("we reD");			_readyBtn.alpha = 0;			_readyBtn.visible = false;//			TweenLite.to(_startBtn, 0.5, {alpha:1});			_waitingForOpponentToTF.visible = true;						_opponentReturnedToClassSelectTF.visible = false;						_cancelBtn.visible = true;			_preGameModel.imReady = true;						_connection.send("USER_READY_CHOSEN");					}				protected function onQuitBtnClick(event:MouseEvent):void		{			// TODO Auto-generated method stub					}			}	}