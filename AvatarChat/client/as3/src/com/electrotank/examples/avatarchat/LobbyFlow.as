package com.electrotank.examples.avatarchat {	import com.electrotank.electroserver5.ElectroServer;	import com.electrotank.electroserver5.api.ErrorType;	import com.electrotank.electroserver5.api.ConnectionClosedEvent;	import com.electrotank.electroserver5.api.ConnectionResponse;	import com.electrotank.electroserver5.api.MessageType;	import com.electrotank.electroserver5.api.LoginRequest;	import com.electrotank.electroserver5.api.LoginResponse;	import com.electrotank.electroserver5.zone.Room;	import com.electrotank.examples.avatarchat.ui.ErrorScreen;	import com.electrotank.examples.avatarchat.ui.LoginScreen;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;		public class LobbyFlow extends MovieClip{				private var _es:ElectroServer;		private var _chatRoomScreen:ChatRoomScreen;				public function LobbyFlow() {			initialize();		}				private function initialize():void {						//create a new ElectroServer instance			_es = new ElectroServer();			_es.loadAndConnect("https://s3.amazonaws.com/xmlFiles/settings.xml");						//add event listeners - new format is _es.engine.addEventListener(MessageType.LoginResponse.name, onLoginResponse);			_es.engine.addEventListener(MessageType.ConnectionResponse.name, onConnectionResponse);			_es.engine.addEventListener(MessageType.LoginResponse.name, onLoginResponse);			_es.engine.addEventListener(MessageType.ConnectionClosedEvent.name, onConnectionClosed);		}				/**		 * Called when a user is connected and logged in. It creates a chat room screen.		 */		private function createChatRoomScreen():void{			_chatRoomScreen = new ChatRoomScreen();			//_chatRoomScreen.addEventListener(Lobby.JOINED_GAME, onJoinedGame);			_chatRoomScreen.es = _es;			_chatRoomScreen.initialize();			addChild(_chatRoomScreen);		}				/**		 * This is used to display an error if one occurs		 */		private function showError(msg:String):void {			var alert:ErrorScreen = new ErrorScreen(msg);			alert.x = 300;			alert.y = 200;			alert.addEventListener(ErrorScreen.OK, onErrorScreenOk);			addChild(alert);		}				/**		 * Called as the result of an OK event on an error screen. Removes the error screen.		 */		private function onErrorScreenOk(e:Event):void {			var alert:ErrorScreen = e.target as ErrorScreen;			alert.removeEventListener(ErrorScreen.OK, onErrorScreenOk);			removeChild(alert);		}				/**		 * Called when a connection attempt has succeeded or failed		 */		public function onConnectionResponse(e:ConnectionResponse):void {			if (e.successful) {				createLoginScreen();			} else {				showError("Failed to connect.");			}		}				/**		 * Creates a screen where a user can enter a username		 */		private function createLoginScreen():void{			var login:LoginScreen = new LoginScreen();			login.x = 400 - login.width / 2;			login.y = 300 - login.height / 2;			addChild(login);						login.addEventListener(LoginScreen.OK, onLoginSubmit);		}				/**		 * Called as a result of the OK event on the login screen. Creates and sends a login request to the server		 */		private function onLoginSubmit(e:Event):void {			var screen:LoginScreen = e.target as LoginScreen;						//create the request			var lr:LoginRequest = new LoginRequest();			lr.userName = screen.username;						//send it			_es.engine.send(lr);						screen.removeEventListener(LoginScreen.OK, onLoginSubmit);			removeChild(screen);		}				/**		 * Called when the server responds to the login request. If successful, create the chat room screen		 */		public function onLoginResponse(e:LoginResponse):void {			if (e.successful) {				createChatRoomScreen();			} else {				showError(e.error.name);			}		}				public function onConnectionClosed(e:ConnectionClosedEvent):void {			showError("Connection was closed");		}			}	}