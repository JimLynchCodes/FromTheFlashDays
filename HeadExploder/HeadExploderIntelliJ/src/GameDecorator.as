package {import characters.FitnessFrancesca;import characters.TonyPizzaGuy;import feathers.controls.IScrollBar;import feathers.controls.ScrollBar;import feathers.controls.ScrollText;import feathers.controls.TextInput;import feathers.controls.text.BitmapFontTextRenderer;import feathers.controls.text.StageTextTextEditor;import feathers.controls.text.TextFieldTextEditor;import feathers.core.ITextEditor;import feathers.core.ITextRenderer;import feathers.events.FeathersEventType;import feathers.text.BitmapFontTextFormat;import flash.events.TimerEvent;import flash.geom.Rectangle;import flash.media.Sound;import flash.media.SoundChannel;import flash.text.SoftKeyboardType;import flash.text.StyleSheet;import flash.text.TextFormat;import flash.utils.Timer;	import characters.FemaleCindy;import characters.Headmond;import objects.CharChoiceButton;import objects.CharacterObject;import objects.MButton;import util.AdColonyAdManager;import util.BubblePopupManager;import starling.core.Starling;	import starling.display.DisplayObject;	import starling.display.Image;	import starling.display.Quad;	import starling.display.Sprite;	import starling.events.Event;	import starling.events.Touch;	import starling.events.TouchEvent;	import starling.events.TouchPhase;import starling.text.TextField;	import starling.utils.VAlign;import util.CharPanningManager;import util.CharSlidingManager;import util.CheatCodeValidator;import util.HeadController;public class GameDecorator extends Sprite	{		private static var instance:GameDecorator = new GameDecorator();		public var userScore:int = 0;		public var explodeBtn:MButton;		private var _model:Model = Model.getInstance();		public var brainTF:TextField;		public var timerTF:TextField;		public var _menuPopupSprite:Sprite;				private var _shopPopupSprite:Sprite;		private var _shopPopupBg:Image;		private var yesBtn:MButton;		private var noBtn:MButton;		private var _confirmPopupTextTF:TextField;		private var _confirmPopupTitleTF:TextField;		private var _confirmPopupSprite:Sprite;		private var _menuBtn:MButton		private var _helpPopupSprite:Sprite;		private var _shopVisible:Boolean =false;		private var minusButton:MButton;		private var menuUpgradeBoxesSP:Sprite;		private var rightArrowMainBtn:MButton;		private var leftArrowMainBtn:MButton;		public var watchForSpecialButton:MButton;		public var characterArea:Sprite;		private var BUTTON_CONTAINER_OFFSET:Number = 0;		private var brainsFloaterTF:TextField;		private var FLOATER_SPACER_Y:Number = 20;		private var floaterTimer:Timer;		private var _initialBrains:int;		private var _incrementingBrains:int;		private var _amountBrainsWon:int;						public var CHAR_TRANSITION_DURATION:Number = 1;								// Shop Pop up variables 		private var menuUpgradeArr:Array = new Array();		private var menuUpgradeOnIconArr:Array = new Array([],[],[]);		private var shopCharNameTF:TextField;		private var _allMenuUpgradeBoxesSP:Sprite;		private var _charNotOwnedSprite:Sprite;		private var charNotOWnedText:TextField;		private var _buyButtonsSprite:Sprite;		private var _buyWithCoinsBtn:MButton;		private var buyWithBrainsText:TextField;		private var buyWithCoinsText:TextField;		private var brainsXAmountTF:TextField;		private var _buyWithBrainsBtn:MButton;		private var menuUpgradeOffIconArr:Array = new Array([],[],[]);		private var _sellWithBrainsBtn:MButton;		private var _sellWithCoinsBtn:MButton;		private var currentLevelValueTF:TextField;		private var nextLevelValueTF:TextField;		private var _upgradeSpecialPanel:Sprite;		private var _upgradeTimePanel:Sprite;		private var _upgradeBrainsPanel:Sprite;		private var _specialPopupSprite:Sprite;		private var watchConfirmBtn:MButton;		private var bonusBrainsFloaterTF:TextField;		private var charLockedImage:Image;		private var _infoPopupSprite:Sprite;		private var _infoScrollText:ScrollText;		private var _infoSwipeToScrollTF:TextField;		private var charChoiceContainer:Sprite;		private var charChoiceContainerMask:Sprite;		public var input:TextInput;		private var _codesPopupSprite:Sprite;	private var _headController:HeadController;	private var okBtn:MButton;	private var _adDidntFillPopupSprite:Sprite;	private var _adDidntFillTitleTF:TextField;	private var _adDidntFillTextTF:TextField;	private var _codeValidator:CheatCodeValidator;	private var _charSlidingManager:CharSlidingManager;	private var _charPanningManager:CharPanningManager;	private var brainsLabelSprite:Sprite;	public var _searchingforAdPopupSprite:Sprite;	private var _bubblePopupManager:BubblePopupManager;								public function GameDecorator()		{			if(instance)			{				throw new Error ("We cannot create a new instance.Please use GameDecorator.getInstance()");			}			_headController = HeadController.getInstance();			_charSlidingManager = CharSlidingManager.getInstance();			_charPanningManager = CharPanningManager.getInstance();		}				public static function getInstance():GameDecorator		{			return instance;		}				public function addGameBackground():void		{//			var gameBGQuad:Quad = new Quad(Main.GAME_W, Main.GAME_H, 0xFFFFFF, 0);//			addChild(gameBGQuad);			var grassBackground:Image = new Image(Assets.getTextureAtlas(4).getTexture("Grassy-Sky-bg"));			grassBackground.pivotX = grassBackground.width * 0.5;			grassBackground.x = Main.GAME_W * 0.5;			grassBackground.scaleX = 1.02;			grassBackground.scaleY = 1.02;			addChild(grassBackground);		}		public function addGameHeader():void		{						var gameHeaderSprite:Sprite = new Sprite();			_model.gameHeaderSprite = gameHeaderSprite;			addChild(gameHeaderSprite);			var headerButtonsContainerImage:Image = new Image(Assets.getTextureAtlas(3).getTexture("HeadearButtonsContainer"));			gameHeaderSprite.addChild(headerButtonsContainerImage);			headerButtonsContainerImage.pivotX = headerButtonsContainerImage.width * 0.5;			gameHeaderSprite.x = Main.GAME_W * 0.5;			gameHeaderSprite.y = 25 + BUTTON_CONTAINER_OFFSET;var headExploderLogoCodysSprite:Sprite = new Sprite();			var headExploderLogoCodys:Image = new Image(Assets.getTextureAtlas(3).getTexture("HeadExploderLogoCodys-01"));			headExploderLogoCodysSprite.addChild(headExploderLogoCodys);			addChild(headExploderLogoCodysSprite);			headExploderLogoCodysSprite.scaleX = 1.4;			headExploderLogoCodysSprite.scaleY = 1.4;			headExploderLogoCodysSprite.pivotX = headExploderLogoCodysSprite.width * 0.5;			headExploderLogoCodysSprite.x = Main.GAME_W * 0.5 + 25;			headExploderLogoCodysSprite.y = 2;//			var titleTf:TextField = new TextField(Main.GAME_W, 30, "Head Exploder!", "HoboStd",  17, 0x000000);//			titleTf.border = false;//			titleTf.hAlign = "center";//			titleTf.vAlign = "top";//			titleTf.italic = true;//			titleTf.y = 1;//			addChild(titleTf);			if (_model.platform == "ios")			{			}			else if (_model.platform == "and")			{			}			else			{				trace("width: " + Main.GAME_W);				headerButtonsContainerImage.width = Main.GAME_W - 20;				trace("#$ unknown platform.")			}			brainsLabelSprite = new Sprite();			gameHeaderSprite.addChild(brainsLabelSprite);						// Brains label image.			var brainsLabelImage:Image = new Image(Assets.getTextureAtlas(3).getTexture("BrainsLabel"));			brainsLabelImage.scaleX = .8;			brainsLabelImage.scaleY = .8;			brainsLabelSprite.addChild(brainsLabelImage);			brainsLabelSprite.pivotY = brainsLabelSprite.height * 0.5;			brainsLabelSprite.pivotX = brainsLabelSprite.width * 0.5;			brainsLabelSprite.y = headerButtonsContainerImage.height * 0.5 + BUTTON_CONTAINER_OFFSET;			brainsLabelSprite.x = -1 * headerButtonsContainerImage.width * 1 / 3;			// Brains label textfield.			brainTF = new TextField(39, 16, "10", "HoboStd", 12, 0xFFFFFF);			brainTF.border = false;			brainTF.vAlign = VAlign.TOP;			brainTF.hAlign = "left";			brainTF.x = 30;			brainTF.y = 5.5;			brainsLabelSprite.addChild(brainTF);			brainTF.text = _model.userDataSharedObject.data.brainCount;			trace("creating brain Tf: " + _model.userDataSharedObject.data.brainCount);			// Get brains amount from shared object			if (_model.userDataSharedObject.data.brainCount != undefined)			{				brainTF.text = "" + _model.userDataSharedObject.data.brainCount;							}			else			{				brainTF.text = "" + Constants.STARTING_BRAINS_COUNT;				_model.userDataSharedObject.data.brainCount = Constants.STARTING_BRAINS_COUNT;				_model.userDataSharedObject.flush();			}						// Menu button.						_menuBtn = new MButton("", 				Assets.getTextureAtlas(3).getTexture("OpenMenuButton"), 				Assets.getTextureAtlas(3).getTexture("OpenMenuButton"),				30);						_menuBtn.pivotX = _menuBtn.width * 0.5;			_menuBtn.pivotY = _menuBtn.height * 0.5;			_menuBtn.y = headerButtonsContainerImage.height * 0.5 + BUTTON_CONTAINER_OFFSET;			_menuBtn.x =  headerButtonsContainerImage.width * 1 / 3 + 10;			gameHeaderSprite.addChild(_menuBtn);			_menuBtn.addEventListener(Event.TRIGGERED, onMenuButtonClicked);			// Create a Sprite that contains the gold coins label Image and TextField.			var goldCoinsLabelSprite:Sprite = new Sprite();			gameHeaderSprite.addChild(goldCoinsLabelSprite);			// Gold coins label image.			var goldCoinsLabel:Image = new Image(Assets.getTextureAtlas(3).getTexture("GoldCoinsLabel"));			goldCoinsLabelSprite.addChild(goldCoinsLabel);			goldCoinsLabel.scaleX = .8;			goldCoinsLabel.scaleY = .8;			goldCoinsLabelSprite.pivotX = goldCoinsLabel.width * 0.5;			goldCoinsLabelSprite.pivotY = goldCoinsLabel.height * 0.5;			goldCoinsLabelSprite.y = headerButtonsContainerImage.height * 0.5 + BUTTON_CONTAINER_OFFSET;			trace("XXx brainsLabelSprite.x: " + brainsLabelSprite.x + ", _menuBtn.x: " + _menuBtn.x);			goldCoinsLabelSprite.x =0;			// Gold coins label text.			var _goldCoinsText:TextField = new TextField(45, 16, "10", "HoboStd", 12, 0xFFFFFF);			_goldCoinsText.border = false;			_goldCoinsText.hAlign = "left";			_goldCoinsText.x = 29;			_goldCoinsText.y = 3.5;			goldCoinsLabelSprite.addChild(_goldCoinsText);			// Watch for Special Button			watchForSpecialButton = new MButton("", Assets.getTextureAtlas(3).getTexture("SpecialButtonUp"),					Assets.getTextureAtlas(3).getTexture("SpecialButtonDown"), 30);			watchForSpecialButton.scaleX = 0.7;			watchForSpecialButton.scaleY = 0.7;			watchForSpecialButton.x = _model.gameHeaderSprite.width * 0.5 - watchForSpecialButton .width;			watchForSpecialButton.y = _model.gameHeaderSprite.y + 31;			trace("watch button y: " + watchForSpecialButton.y + " " + _model.gameHeaderSprite.y +  " " + _model.gameHeaderSprite.height);			_model.gameHeaderSprite.addChild(watchForSpecialButton);			watchForSpecialButton.addEventListener(Event.TRIGGERED, onWatchForSpecialButtonClicked);			trace("$#% " + _model.gameHeaderSprite.x + " " + _model.gameHeaderSprite.y + " " + watchForSpecialButton.x + " " + watchForSpecialButton.x);			// Get coins amount from shared object			if (_model.userDataSharedObject.data.coinsCount != null)			{				_goldCoinsText.text = "" + _model.userDataSharedObject.data.coinsCount;			}			else			{				_goldCoinsText.text = "0";				_model.userDataSharedObject.data.coinsCount = 0;				_model.userDataSharedObject.flush();			}		}		private function inputEnterHandler(event:Event):void {			trace("enter clicked.")			_codeValidator.validateCode(input.text);		}		private function inputChangeHandler(event:Event):void {			trace("input changed.")		}		private function inputDeactivateHandler(event:Event):void {			trace("input deactivated.")		}				public function displayUserGettingBrains(initialBrains:int, brainsWonFromExplode:int, totalBrainsWon:int, bonusBrainsWon:int = 0):void		{			trace("displaying user getting brains initial: " + initialBrains + " brainsWonFromExplode: " + brainsWonFromExplode + " totalBrainsWon: " + totalBrainsWon + " bonusBrainsWon: " + bonusBrainsWon);			_initialBrains = initialBrains;			_incrementingBrains = _initialBrains;			_amountBrainsWon = totalBrainsWon;						brainsFloaterTF.visible = true;			brainsFloaterTF.alpha = 1;			if (brainsWonFromExplode >= 0) {				brainsFloaterTF.text = "+" + brainsWonFromExplode;			}			else {				brainsFloaterTF.text = "-" + brainsWonFromExplode;			}			brainsFloaterTF.y = brainTF.y + FLOATER_SPACER_Y;			if (bonusBrainsWon > 0)			{				bonusBrainsFloaterTF.visible = true;				bonusBrainsFloaterTF.alpha = 1;				bonusBrainsFloaterTF.text = "+" + bonusBrainsWon;				bonusBrainsFloaterTF.y = brainTF.y + FLOATER_SPACER_Y;			}			floatAwayFloaters();			incrementOrDecrementBrainsTF(brainsWonFromExplode);					}		private function floatAwayFloaters():void {			Starling.juggler.tween(brainsFloaterTF, Constants.FLOATER_FLOAT_DURATION, { //x: 155,				y: brainsFloaterTF.y + 30,				alpha: 0.2,				onComplete:onBrainsFloaterComplete			})			Starling.juggler.tween(bonusBrainsFloaterTF, Constants.FLOATER_FLOAT_DURATION + 2, { //x: 155,				y: bonusBrainsFloaterTF.y + 30,				alpha: 0.2,				onComplete:onBonusBrainsFloaterComplete			})		}		private function onBonusBrainsFloaterComplete():void		{			bonusBrainsFloaterTF.visible = false;		}				private function incrementOrDecrementBrainsTF(amount:int):void		{			// Adding Brains			if (amount > 0) {				_model.userDataSharedObject.data.brainCount += amount;				_model.userDataSharedObject.flush();				trace("incrementing brains this much: " + amount);				if (Math.abs(amount) < 300)				{					floaterTimer = new Timer(30, amount);					floaterTimer.addEventListener(TimerEvent.TIMER, onIncrementTimerTick);					floaterTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onIncrementTimerComplete);					floaterTimer.start();				}				else				{					// increment by fives					floaterTimer = new Timer(20, amount / 5);					floaterTimer.addEventListener(TimerEvent.TIMER, onIncrementTimerTickByFives);					floaterTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onIncrementTimerComplete);					floaterTimer.start();				}			}			else if (amount < 0)			{				trace("Decrementing brains: " + amount);				// subtracting brains				_model.userDataSharedObject.data.brainCount += amount;				_model.userDataSharedObject.flush();				trace("decrementing brains this much: " + amount);				if (Math.abs(amount) < 300)				{					floaterTimer = new Timer(30, Math.abs(amount));					floaterTimer.addEventListener(TimerEvent.TIMER, onDecrementTimerTick);					floaterTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onDecrementTimerComplete);					floaterTimer.start();				}				else				{					// increment by fives					floaterTimer = new Timer(20, Math.abs(amount) / 5);					floaterTimer.addEventListener(TimerEvent.TIMER, onDecrementTimerTickByFives);					floaterTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onDecrementTimerComplete);					floaterTimer.start();				}			}		}	private function onDecrementTimerTick(event:TimerEvent):void {		_incrementingBrains -= 1;		brainTF.text = "" + _incrementingBrains;	}	private function onDecrementTimerComplete(event:TimerEvent):void {		floaterTimer.removeEventListener(TimerEvent.TIMER, onDecrementTimerTick);		floaterTimer.removeEventListener(TimerEvent.TIMER, onDecrementTimerComplete);		floaterTimer = null;		brainTF.text = "" + _model.userDataSharedObject.data.brainCount;	}	private function onDecrementTimerTickByFives(event:TimerEvent):void {		if (_incrementingBrains - 5 >= _model.userDataSharedObject.data.brainCount)		{			_incrementingBrains -= 5;			brainTF.text = "" + _incrementingBrains;		}	}	private function onIncrementTimerTickByFives(event:TimerEvent):void {		trace("ticking by fives");		if (_incrementingBrains + 5 <= _model.userDataSharedObject.data.brainCount)		{			_incrementingBrains += 5;			brainTF.text = "" + _incrementingBrains;		}	}				protected function onIncrementTimerComplete(event:TimerEvent):void		{			if (floaterTimer != null) {				floaterTimer.removeEventListener(TimerEvent.TIMER, onIncrementTimerTick);				floaterTimer.removeEventListener(TimerEvent.TIMER, onIncrementTimerComplete);				floaterTimer = null;			}			brainTF.text = "" + _model.userDataSharedObject.data.brainCount;		}				protected function onIncrementTimerTick(event:TimerEvent):void		{			_incrementingBrains += 1;			brainTF.text = "" + _incrementingBrains;					}				private function floatAwayFloater(floaterTF:TextField):void		{			Starling.juggler.tween(floaterTF, Constants.FLOATER_FLOAT_DURATION, { //x: 155,				y: floaterTF.y + 30,				yes: 0.2,				onComplete:onBrainsFloaterComplete			}) 					}				private function onBrainsFloaterComplete():void		{			brainsFloaterTF.visible = false;		}				public function buildGameCharacters():void		{			characterArea = new Sprite();			_model.characterArea = characterArea;			addChild(characterArea);						var char1CharacterObject:CharacterObject = new Headmond();			characterArea.addChild(char1CharacterObject);			_model.characterList.push(char1CharacterObject);			char1CharacterObject.pivotY = char1CharacterObject.charSprite.height;			char1CharacterObject.visible = false;			trace("^^^ char1height: " + char1CharacterObject.charSprite.height);			char1CharacterObject.y = explodeBtn.y - explodeBtn.height - char1CharacterObject.Y_OFFSET_FROM_EXPLODE_BTN;			trace("BUILDING GAME CHARS Char ob created headmond: " + char1CharacterObject.ON_SCREEN_X + " , " + char1CharacterObject.x);			// ***** Headmond is always created. Add new game characters here.			trace("OLIVIA UNLOCKED? " + _model.userDataSharedObject.data["olivia" + Constants.UNLOCKED]);			if (_model.userDataSharedObject.data["olivia" + Constants.UNLOCKED] == true) {				trace("adding olivia character!!!!")				var oliviaCharacter:CharacterObject = new FemaleCindy				characterArea.addChild(oliviaCharacter);				oliviaCharacter.x = oliviaCharacter.ON_SCREEN_X;				oliviaCharacter.y = oliviaCharacter.ON_SCREEN_Y;				_model.characterList.push(oliviaCharacter);				oliviaCharacter.visible = false;			}			if (_model.userDataSharedObject.data["francesca" + Constants.UNLOCKED] == true) {				trace("adding francesca character!!!!")				var francescaCharacter:CharacterObject = new FitnessFrancesca;				characterArea.addChild(francescaCharacter);				francescaCharacter.x = francescaCharacter.ON_SCREEN_X;				francescaCharacter.y = francescaCharacter.ON_SCREEN_Y;				_model.characterList.push(francescaCharacter);				francescaCharacter.visible = false;			}			if (_model.userDataSharedObject.data["tony" + Constants.UNLOCKED] == true) {				trace("adding tony character!!!!")				var tonyCharacter:CharacterObject = new TonyPizzaGuy();				characterArea.addChild(tonyCharacter);				tonyCharacter.x = tonyCharacter.ON_SCREEN_X;				tonyCharacter.y = tonyCharacter.ON_SCREEN_Y;				_model.characterList.push(tonyCharacter);				tonyCharacter.visible = false;			}				// =====================				//				//		After all game characters are created.				trace("Final size of _model.characterList: " + _model.characterList);			if (_model.userDataSharedObject.data[Constants.CHAR_CURRENTLY_ON_SCREEN] == undefined)			{				_model.userDataSharedObject.data[Constants.CHAR_CURRENTLY_ON_SCREEN] = "headmond";			}			_model.userDataSharedObject.flush();				for (var i:int = 0; i < _model.characterList.length; i++) {					trace("LOOPIN: " + i + " of " + _model.characterList.length + ". Name is " + _model.characterList[i].shortName);					var charOb:CharacterObject = _model.characterList[i];					if (_model.characterList.length > 1)					{						_charPanningManager.setupForPanning(charOb);					}					trace("$#$ checking " + charOb.shortName + " and " + _model.userDataSharedObject.data[Constants.CHAR_CURRENTLY_ON_SCREEN]);					if (charOb.shortName == _model.userDataSharedObject.data[Constants.CHAR_CURRENTLY_ON_SCREEN].toString() ) {						_model.currentCharacterOnScreen = charOb;						_model.currentCharacterOnScreen.charHead = charOb.charHead;						trace("yep, char is now: " + charOb.shortName);						charOb.visible = true;						trace(charOb.shortName + " should be visible: " + charOb.visible);					}					trace("Is " + charOb.shortName + " currently growing? " + _model.userDataSharedObject.data[charOb.shortName + Constants.CURRENTLY_GROWING])					if (_model.userDataSharedObject.data[charOb.shortName + Constants.CURRENTLY_GROWING])					{						var dateNow:Date = new Date();						var finishedDate:Date = _model.userDataSharedObject.data[charOb.shortName + Constants.FINISHED_DATE];						trace("current date: " + dateNow);						trace("fin date: " + finishedDate);						trace("subtracing dates: " + (finishedDate.valueOf() - dateNow.valueOf()) / 1000);						if (finishedDate == undefined)						{							trace("it was undefined");						}						var finishedDateNumber:Number = Number(finishedDate);						var secondsToGrow:int = (finishedDate.valueOf() - dateNow.valueOf()) / 1000;						trace("finished dte num " + finishedDateNumber);						trace("Seconds left to grow for: " + charOb.shortName + " is: " + secondsToGrow);						if (finishedDate != undefined)						{							trace("finished date wasn't undefined: " + secondsToGrow);							trace("STARTING GROWING FROM DECORATOR");						}						else						{							trace("indeed, it was Nan");						}					}				}				trace("#$ Creating arrows?");				// Right Arrow				rightArrowMainBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("mainArrowRight"),						Assets.getTextureAtlas(3).getTexture("mainArrowRight"), 30);				rightArrowMainBtn.x = Main.GAME_W * .85;			rightArrowMainBtn.y = Main.GAME_H * 0.5;				rightArrowMainBtn.name = "rightArrowMainBtn";				addChild(rightArrowMainBtn);				rightArrowMainBtn.addEventListener(Event.TRIGGERED, onRightArrowMainBtnClicked);				// Left Arrow				leftArrowMainBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("mainArrowLeft"),						Assets.getTextureAtlas(3).getTexture("mainArrowLeft"), 30);				leftArrowMainBtn.x = Main.GAME_W * .04;				leftArrowMainBtn.y = Main.GAME_H * 0.5;				leftArrowMainBtn.name = "leftArrowMainBtn";				addChild(leftArrowMainBtn);				leftArrowMainBtn.addEventListener(Event.TRIGGERED, onLeftArrowMainBtnClicked);				checkForDisplayingMainArrows();		}		private function checkForDisplayingMainArrows():void		{			trace("#$ checking for display arrows: " + _model.characterList.length);			if (_model.characterList.length > 1)			{				leftArrowMainBtn.visible = true;				rightArrowMainBtn.visible = true;			}			else {				leftArrowMainBtn.visible = false;				rightArrowMainBtn.visible = false;			}		}		private function onWatchForSpecialButtonClicked(e:Event):void		{						trace("use special power button clicked!");			trace("_model.userDataSharedObject.data[_model.currentCharacterOnScreen.shortName + Constants.SPECIAL_ACTIVATED] " + _model.userDataSharedObject.data[_model.currentCharacterOnScreen.shortName + Constants.SPECIAL_ACTIVATED]);			trace("_model.charactersCurrentlySliding  " + _model.charactersCurrentlySliding );			if (_model.userDataSharedObject.data[_model.currentCharacterOnScreen.shortName + Constants.SPECIAL_ACTIVATED] == false &&				_model.charactersCurrentlySliding != true)			{				Util.tweenPopup(_specialPopupSprite, true);							}		}				private function onRightArrowMainBtnClicked(e:Event):void		{			trace("Right Arrow button clicked");			_charSlidingManager.onUserSlidesChar("RIGHT", true);		}		private function onLeftArrowMainBtnClicked(e:Event):void		{			trace("Left Arrow button clicked");			_charSlidingManager.onUserSlidesChar("LEFT", true);		}						public function addExplodeBtn():void		{						// TODO - Change the null's to the textures for 			// the explode button in up and down states.			explodeBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("explode btn small 1x"),				Assets.getTextureAtlas(3).getTexture("ExplodeBtn0003"), 30);			explodeBtn.x = Main.GAME_W/2 - explodeBtn.width/2; // Main.GAME_W/2 * 0.5;			explodeBtn.y = Main.GAME_H - 25 - 5 - explodeBtn.height;			trace("^^^ height: " + Main.GAME_H);			trace("^^^ buttonheight: " + explodeBtn.height);			addChild(explodeBtn);		}						public function onMenuButtonClicked(eve:Event):void		{			Util.tweenPopup(_menuPopupSprite, true);		}						private function onMenuClicked(eve:Event):void{			var eveTarget:String = (eve.target as Object).name;			trace("AFTER CLICKED  :"+eveTarget);			switch(eveTarget)			{				case "helpBtn":					trace("HELP BUTTON");					Util.tweenPopup(_helpPopupSprite, true);					break;								case "shopBtn":					trace("shop BUTTON");					Util.tweenPopup(_shopPopupSprite, true);					_shopVisible = true;					break;								case "settingsBtn":					trace("settings BUTTON");					Util.tweenPopup(_shopPopupSprite, true);					break;				case "codesBtn":					trace("codes BUTTON");					Util.tweenPopup(_codesPopupSprite, true);					break;								case "xBtn":					trace("xBtn  BUTTON");					if (!_shopVisible)					{						Util.tweenPopup(_menuPopupSprite, false);											}					break;								default:					break;			} 		}				public function buildMenuPopup():void{			_menuPopupSprite = new Sprite;			_model.menuPopupSprite = _menuPopupSprite;			addPopupCommonObjects(_menuPopupSprite, "MENU");			// Shop Btn			var shopBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("ShopBtn"),					Assets.getTextureAtlas(3).getTexture("ShopBtn"), 30);			shopBtn.x = _menuPopupSprite.width/2 - shopBtn.width/2;			shopBtn.y = _menuPopupSprite.height/2 - shopBtn.height/2 - 40;			shopBtn.name = "shopBtn";			_menuPopupSprite.addChild(shopBtn);			// Help Btn			var helpBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("HelpBtn"), 				Assets.getTextureAtlas(3).getTexture("HelpBtn"), 30);			helpBtn.x = _menuPopupSprite.width/2 - helpBtn.width/2;			helpBtn.y = shopBtn.y + shopBtn.height + 10;			helpBtn.name = "helpBtn";			_menuPopupSprite.addChild(helpBtn);						// Codes Btn			var codesBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("CodesBtn"),					Assets.getTextureAtlas(3).getTexture("CodesBtn"), 30);			codesBtn.x = _menuPopupSprite.width/2 - codesBtn.width/2;			codesBtn.y = helpBtn.y + (helpBtn.height + 10);			codesBtn.name = "codesBtn";			_menuPopupSprite.addChild(codesBtn);									// Settings Btn//			var settingsBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("explode btn small 1x"),//				Assets.getTextureAtlas(3).getTexture("explode btn small 1x"), 30);//			settingsBtn.x = _menuPopupSprite.width/2 - settingsBtn.width/2; // Main.GAME_W/2 * 0.5;//			settingsBtn.y = shopBtn.y + shopBtn.height + 10;//			settingsBtn.name = "settingsBtn";						_menuPopupSprite.scaleX = _menuPopupSprite.scaleY = 0.8;			_menuPopupSprite.x = Main.GAME_W/2 -  _menuPopupSprite.width/2;			_menuPopupSprite.y = Constants.POPUP_Y_OFF_SCREEN;						addChild(_menuPopupSprite); 			//			settingsBtn.addEventListener(Event.TRIGGERED, onMenuClicked)			shopBtn.addEventListener(Event.TRIGGERED, onMenuClicked)			helpBtn.addEventListener(Event.TRIGGERED, onMenuClicked);			codesBtn.addEventListener(Event.TRIGGERED, onMenuClicked);			_menuPopupSprite.getChildByName("xBtn").addEventListener(Event.TRIGGERED, onMenuClicked)		}		// ====== end menu popup =======								// ====== Shop popup start =======		public function buildShopPopup():void		{						//======== Background Image			_shopPopupSprite = new Sprite;			addChild(_shopPopupSprite);			addPopupCommonObjects(_shopPopupSprite, "SHOP");			_shopPopupSprite.getChildByName("xBtn").addEventListener(Event.TRIGGERED, onXBtnShopTriggered);						//=========== char Choice container=========================			var _charUpgradeRectBox:Image = new Image(Assets.getTextureAtlas(3).getTexture("menuCharChoiceContainer"));			_shopPopupSprite.addChild(_charUpgradeRectBox);			_charUpgradeRectBox.pivotX = 0;			_charUpgradeRectBox.pivotY = 0;			_charUpgradeRectBox.x  = .5 * _shopPopupSprite.width - .5 * _charUpgradeRectBox.width ;			_charUpgradeRectBox.y = 95;			trace("%%% _charUpgradeRectBox, x: " + _charUpgradeRectBox.x + ", y: " + _charUpgradeRectBox.y + ", w: " + _charUpgradeRectBox.width + ", h: " + _charUpgradeRectBox.height)			charChoiceContainerMask = new Sprite();			_shopPopupSprite.addChild(charChoiceContainerMask);			charChoiceContainer = new Sprite();			charChoiceContainerMask.addChild(charChoiceContainer);			charChoiceContainerMask.x  = .5 * _shopPopupSprite.width - 80;			charChoiceContainerMask.y = 95;			trace("%%% charChoiceContainer, x: " + charChoiceContainer.x + ", y: " + charChoiceContainer.y + ", w: " + charChoiceContainer.width + ", h: " + charChoiceContainer.height);	var rectForClipRect:Rectangle = new Rectangle(0,0,_charUpgradeRectBox.width - 10,200);			charChoiceContainerMask.clipRect = rectForClipRect;			// Timer above character's head.			shopCharNameTF = new TextField(200, 40, "10", "HoboStd", 14, 0xFFD700);			shopCharNameTF.border = false;			shopCharNameTF.visible = false;			shopCharNameTF.x = _shopPopupSprite.x + .5 * _shopPopupSprite.width - .5 * shopCharNameTF.width;			shopCharNameTF.y = _charUpgradeRectBox.y + _charUpgradeRectBox.height - 5;			shopCharNameTF.text = "Headmond X. Splodington";			_shopPopupSprite.addChild(shopCharNameTF);			// Char Choice Buttons		for (var i:int =0; i < Constants.allCharactersMasterList.length; i++){								var charChoiceButton:CharChoiceButton = new CharChoiceButton(i);				// Button is added regardless of whether char is unlocked.				charChoiceButton.addEventListener(TouchEvent.TOUCH, onCharChoiceButtonClicked);				trace("adding char choice button");				charChoiceContainer.addChild(charChoiceButton);				charChoiceButton.x  = (i * charChoiceButton.width );				charChoiceButton.y = 5;				_model.charChoiceButtonArray.push(charChoiceButton);			}			trace("%%% Container beginning x: " + charChoiceContainer.x);			// char locked image			charLockedImage = new Image(Assets.getTextureAtlas(3).getTexture("ShopLock"));			charLockedImage.visible = false;			charLockedImage.pivotX = charLockedImage.width * 0.5;			charLockedImage.pivotY = charLockedImage.height * 0.5;			charLockedImage.x = _shopPopupSprite.width * 0.5;			charLockedImage.y = _shopPopupSprite.height * 0.5 + 45;			_shopPopupSprite.addChild(charLockedImage);			//========= left arrow button			var leftArrowShopBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("menuScrollArrowLeft"),					Assets.getTextureAtlas(3).getTexture("menuScrollArrowLeft"), 30);			leftArrowShopBtn.x = _shopPopupSprite.x + leftArrowShopBtn.width - 8;			leftArrowShopBtn.y = 110;			_shopPopupSprite.addChild(leftArrowShopBtn);			leftArrowShopBtn.addEventListener(Event.TRIGGERED, onLeftArrowShopBtnClicked);			//======= right arrow button			var rightArrowShopBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("menuScrollArrowRight"),					Assets.getTextureAtlas(3).getTexture("menuScrollArrowRight"), 30);			rightArrowShopBtn.x = _shopPopupSprite.x +  _shopPopupSprite.width - rightArrowShopBtn.width - 25;			rightArrowShopBtn.y = 107;			_shopPopupSprite.addChild(rightArrowShopBtn);			rightArrowShopBtn.addEventListener(Event.TRIGGERED, onRightArrowShopBtnClicked);			// ======= button			var infoBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("charInfoBtn"),					Assets.getTextureAtlas(3).getTexture("charInfoBtn"), 30);			infoBtn.x = leftArrowShopBtn.x;			infoBtn.y = leftArrowShopBtn.y - infoBtn.height - 5;			_shopPopupSprite.addChild(infoBtn);			infoBtn.addEventListener(Event.TRIGGERED, onShopInfoClicked);			//========= Menu Upgrade Container =======================			_allMenuUpgradeBoxesSP = new Sprite();			_shopPopupSprite.addChild(_allMenuUpgradeBoxesSP)			_allMenuUpgradeBoxesSP.visible = false;						for (var j:int = 0; j< 3; j++){					menuUpgradeBoxesSP = new Sprite()				var menuUpgradRectIMG:Image = new Image(Assets.getTextureAtlas(3).getTexture("menuUpgradeContainer"));				menuUpgradeBoxesSP.addChild(menuUpgradRectIMG);				menuUpgradRectIMG.x = 10;				_allMenuUpgradeBoxesSP.addChild(menuUpgradeBoxesSP);				_allMenuUpgradeBoxesSP.x = -4.5;				menuUpgradeBoxesSP.y = 27 + (j * menuUpgradRectIMG.height)* 1.09;  												minusButton = new MButton("", Assets.getTextureAtlas(3).getTexture("upgradeMinusBtn"), 					Assets.getTextureAtlas(3).getTexture("upgradeMinusBtn"), 30);				// FOR FIRST RELEASE HIDE THE MINUS BUTTONS								// menuUpgradeBoxesSP.addChild(minusButton);				minusButton.name = "minusButton_"+j;				trace("menuUpgradeBoxesSP.height " + menuUpgradeBoxesSP.height);				minusButton.y = menuUpgradeBoxesSP.height / 4 + 2;				minusButton.addEventListener(Event.TRIGGERED, onMinusButtonClicked);												var plusButton:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("upgradePlusBtn"), 					Assets.getTextureAtlas(3).getTexture("upgradePlusBtn"), 30);				menuUpgradeBoxesSP.addChild(plusButton);				plusButton.name = "plusButton" + j;				plusButton.x = menuUpgradeBoxesSP.width - (plusButton.width + 10);				plusButton.y = menuUpgradeBoxesSP.height/4;				plusButton.addEventListener(Event.TRIGGERED, onPlusButtonClicked);				if (j ==0){					_upgradeBrainsPanel = menuUpgradeBoxesSP;									}				else if (j==1) {					_upgradeTimePanel = menuUpgradeBoxesSP;				}				else if (j==2) {					_upgradeSpecialPanel = menuUpgradeBoxesSP;				}												menuUpgradeArr.push(menuUpgradeBoxesSP);				addMarkerIconDotImgs(menuUpgradeArr[j],j);								currentLevelValueTF = new TextField(150, 30, "10", "HoboStd", 9, 0xFFD700);				currentLevelValueTF.border = false;				currentLevelValueTF.x = 30;				currentLevelValueTF.y = -4;				currentLevelValueTF.hAlign = "left";				currentLevelValueTF.vAlign = "center";				currentLevelValueTF.text = "-LMNOP";				currentLevelValueTF.name = "currentLevelValueTF";				menuUpgradeBoxesSP.addChild(currentLevelValueTF);								nextLevelValueTF = new TextField(150, 30, "10", "HoboStd", 9, 0xFFD700);				nextLevelValueTF.border = false;				nextLevelValueTF.x = 30;				nextLevelValueTF.y = 28;				nextLevelValueTF.hAlign = "left";				nextLevelValueTF.vAlign = "center";				menuUpgradeBoxesSP.addChild(nextLevelValueTF);				nextLevelValueTF.text = "HMMM TIME BRAINS ----";				nextLevelValueTF.name = "nextLevelValueTF";			}									// ======================= Char Not Owned Sprite ========================================								_charNotOwnedSprite = new Sprite();				_charNotOwnedSprite.visible = false;								charNotOWnedText = new TextField(200, 50, "You don't own this chaacter.", "HoboStd", 14, 0xFFD700);				charNotOWnedText.x = 55;				charNotOWnedText.y = 215;				charNotOWnedText.hAlign = "left";				charNotOWnedText.border = true;				_charNotOwnedSprite.addChild(charNotOWnedText);				_charNotOwnedSprite.visible = false;				_charNotOwnedSprite.addChild(charNotOWnedText);								// ========================== Buy Buttons Sprite ====================								_buyButtonsSprite = new Sprite();				_shopPopupSprite.addChild(_buyButtonsSprite);				_buyButtonsSprite.y = 385;				_buyButtonsSprite.x = 15;								buyWithBrainsText = new TextField(100, 70, "10", "HoboStd", 10, 0xFFD700);				buyWithBrainsText.border = false;				buyWithBrainsText.x = 0;				buyWithBrainsText.y = -35;				buyWithBrainsText.text = "Buy with Brains";				_buyButtonsSprite.addChild(buyWithBrainsText);								brainsXAmountTF = new TextField(130, 70, "10", "HoboStd", 10, 0xFFD700);				brainsXAmountTF.border = false;				brainsXAmountTF.hAlign = "left";				brainsXAmountTF.x = 35;				brainsXAmountTF.y = -18;				brainsXAmountTF.text = "x 100";				_buyButtonsSprite.addChild(brainsXAmountTF);								// Little Brain image.				var littleBrain:Image = new Image(Assets.getTextureAtlas(3).getTexture("LittleBrain"));				_buyButtonsSprite.addChild(littleBrain);				littleBrain.pivotX = littleBrain.width * 0.5;				littleBrain.pivotY = littleBrain.height * 0.5;				littleBrain.y = 18;				littleBrain.x = 22;								_buyWithBrainsBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("littleBuyBtn"), 					Assets.getTextureAtlas(3).getTexture("littleBuyBtn"), 30);				_buyButtonsSprite.addChild(_buyWithBrainsBtn);				_buyWithBrainsBtn.x = 10;				_buyWithBrainsBtn.y = 30;				_buyWithBrainsBtn.addEventListener(Event.TRIGGERED, onBuyClicked)								_sellWithBrainsBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("littleSellBtn"), 					Assets.getTextureAtlas(3).getTexture("littleSellBtn"), 30);				_buyButtonsSprite.addChild(_sellWithBrainsBtn);				_sellWithBrainsBtn.x = 10;				_sellWithBrainsBtn.y = 30;				_sellWithBrainsBtn.visible = false;				_sellWithBrainsBtn.addEventListener(Event.TRIGGERED, onSellBtnClicked);								// FOR FIRST RELEASE DON'T SHOW THE GOLD COINS BUY OPTIONS				//===================================================================				/*								buyWithCoinsText = new TextField(130, 70, "10", "Verdana", 10, 0x111111);				buyWithCoinsText.border = false;				buyWithCoinsText.x = 150;				buyWithCoinsText.y = -32;				buyWithCoinsText.text = "Buy with Coins";				//			 shopCharNameTF.visible = false;				_buyButtonsSprite.addChild(buyWithCoinsText);												// Little Gold Coin image				var littleGoldCoin:Image = new Image(Assets.getTextureAtlas(3).getTexture("LittleCoin"));				_buyButtonsSprite.addChild(littleGoldCoin);				littleGoldCoin.pivotX = littleGoldCoin.width * 0.5;				littleGoldCoin.pivotY = littleGoldCoin.height * 0.5;				littleGoldCoin.y = 21;				littleGoldCoin.x = 180;								coinsXAmountTF = new TextField(130, 70, "10", "Verdana", 10, 0x111111);				coinsXAmountTF.border = false;				coinsXAmountTF.hAlign = "left";				coinsXAmountTF.x = 195;				coinsXAmountTF.y = -18;				coinsXAmountTF.text = "x 100";				//			 shopCharNameTF.visible = false;				_buyButtonsSprite.addChild(coinsXAmountTF);												_buyWithCoinsBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("littleBuyBtn"), 					Assets.getTextureAtlas(3).getTexture("littleBuyBtn"), 30);				_buyButtonsSprite.addChild(_buyWithCoinsBtn);				//				 _buyWithCoinsBtn.name = "minusButton_"+j;				_buyWithCoinsBtn.x = 170;				_buyWithCoinsBtn.y = 30;				_buyWithCoinsBtn.addEventListener(Event.TRIGGERED, onBuyClicked)																_sellWithCoinsBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("littleSellBtn"), 					Assets.getTextureAtlas(3).getTexture("littleSellBtn"), 30);				_buyButtonsSprite.addChild(_sellWithCoinsBtn);				//				 _sellWithCoinsBtn.name = "minusButton_"+j;				_sellWithCoinsBtn.x = 170;				_sellWithCoinsBtn.y = 30;				_sellWithCoinsBtn.visible = false;				_sellWithCoinsBtn.addEventListener(Event.TRIGGERED, onSellBtnClicked);					//				 charNotOWnedText = new TextField(200, 70, "10", "Verdana", 14, 0x111111);				//				 charNotOWnedText.border = false;				//				 charNotOWnedText.x = _shopPopupSprite.x + .5 * _shopPopupSprite.width - .5 * shopCharNameTF.width;				//				 charNotOWnedText.y = _charUpgradeRectBox.y + _charUpgradeRectBox.height + 80;				//				 charNotOWnedText.text = "You don't own this character.";				//				 //			 shopCharNameTF.visible = false;				//				 _charNotOwnedSprite.addChild(charNotOWnedText);												*/				// ===============================================================================								_buyButtonsSprite.visible = false;	 			_allMenuUpgradeBoxesSP.y =  _charUpgradeRectBox.y + _charUpgradeRectBox.height + 10;									_shopPopupSprite.scaleX = _shopPopupSprite.scaleY = 0.8;			_shopPopupSprite.x = Main.GAME_W/2 -  _menuPopupSprite.width/2;			_shopPopupSprite.y = Constants.POPUP_Y_OFF_SCREEN;						// fill in shop with info from last time.			for each (var charBtn:CharChoiceButton in _model.charChoiceButtonArray);			{				if (charBtn.charName == _model.userDataSharedObject.data.shortNameOfLastCharSelectedInShop)				{										charBtn.isSelected = true;					shopCharNameTF.visible = true;					shopCharNameTF.text = charBtn.charName;				}			}		}		private function _infoScrollText_triggeredHandler(event:Event):void {			trace("scroll text triggered");		}				private function onBuyClicked():void		{			_confirmPopupTextTF.text = "Are you sure you want to buy " +					Util.getHumanReadableCurrentThingToBuy(_model.currentThingToBuy) + " for " + _model.currentCostToBuyBrains + " brains?";			trace("clicked");			_confirmPopupSprite.visible = true;		}				private function onSellBtnClicked():void		{			_confirmPopupTextTF.text = "Are you sure you want to sell " +				_model.currentThingToSell + " for " + _model.currentSellBackPriceBrains + " brains?";			trace("clicked");			_confirmPopupSprite.visible = true;		}				private function onCharChoiceButtonClicked(e:TouchEvent):void		{			var touches:Vector.<Touch> = e.getTouches(this);			var clicked:DisplayObject = e.currentTarget as DisplayObject;			if ( touches.length == 1 )			{				var touch:Touch = touches[0];   				if ( touch.phase == TouchPhase.ENDED )				{					trace ( e.currentTarget, e.target );					trace("char choice button clicked");										shopCharNameTF.visible = true;					var charChoiceButtonClicked:CharChoiceButton = CharChoiceButton(e.currentTarget);					_model.currentCharChoiceBtnSelected = charChoiceButtonClicked;					trace("The choice button selected: " + charChoiceButtonClicked);					_model.userDataSharedObject.data.lastCharChoiceButtonClicked = charChoiceButtonClicked;					_model.userDataSharedObject.flush();					unselectAllCharChoiceButtons();										charChoiceButtonClicked.isSelected = true;										shopCharNameTF.text = charChoiceButtonClicked.charName;					deteremineIfCharOwned(charChoiceButtonClicked);														}			}					}				private function unselectAllCharChoiceButtons():void		{			for each (var charChoiceBtn:CharChoiceButton in _model.charChoiceButtonArray)			{				charChoiceBtn.isSelected = false;			}		}						private function deteremineIfCharOwned(charChoiceBtn:CharChoiceButton):void		{			var charName:String = charChoiceBtn.charName;			_model.currentCharChoiceBtnSelected = charChoiceBtn;			trace("determining char button clicked: " + charName);									// Save SharedObject for last charChoiceBtn selected. 						_model.userDataSharedObject.data.shortNameOfLastCharSelectedInShop = charName;			_model.userDataSharedObject.flush();            trace("Checking this sharedObject: " + charChoiceBtn.shortName + Constants.BUY_CHARACTER);			if (_model.userDataSharedObject.data[charChoiceBtn.shortName + Constants.BUY_CHARACTER] == null ||					_model.userDataSharedObject.data[charChoiceBtn.shortName + Constants.BUY_CHARACTER] == undefined)			{				_model.userDataSharedObject.data[charChoiceBtn.shortName + Constants.BUY_CHARACTER] = false;			}					// Determine if selected button's character is unlocked (bought already).            if (_model.userDataSharedObject.data[charChoiceBtn.shortName + Constants.BUY_CHARACTER] == true) {                trace("we own character.");                displayCharUpgadeSprite(charChoiceBtn.shortName);            } else {                trace("we dont own character: " + charChoiceBtn.shortName + " :(");                _model.currentThingToBuy = charChoiceBtn.shortName + Constants.BUY_CHARACTER;                _model.currentCostToBuyBrains = charChoiceBtn.costToBuyBrains;                _model.currentCostToBuyCoins = charChoiceBtn.costToBuyCoins;                displayCharNotOwnedSprite();            }		}						private function displayCharNotOwnedSprite():void		{			trace("displaying character not owned.");			_allMenuUpgradeBoxesSP.visible = false;						_charNotOwnedSprite.visible = true;			charLockedImage.visible = true;									displayBuyButtons();					}				private function displayBuyButtons():void		{			brainsXAmountTF.text = "x " + _model.currentCostToBuyBrains;			_buyButtonsSprite.visible = true;		}				private function hideBuyButtons():void		{			_buyButtonsSprite.visible = false;					}				private function displayCharUpgadeSprite(shortName:String):void		{						trace("hiding buy buttons...");			_charNotOwnedSprite.visible = false;			_buyButtonsSprite.visible = false;			_allMenuUpgradeBoxesSP.visible = true;			charLockedImage.visible = false;						trace("here fine...");						updateUpgradePanel(shortName, 0);			updateUpgradePanel(shortName, 1);			updateUpgradePanel(shortName, 2);		}				private function onShopInfoClicked():void		{			Util.tweenPopup(_infoPopupSprite, true);			if (_model.currentCharChoiceBtnSelected == null)			{				trace("currentCharChoiceBtn is null!");				_infoScrollText.text = "";				_infoSwipeToScrollTF.text = "No Char Selected."			}			else			{				trace("displaying info-mation about " + _model.currentCharChoiceBtnSelected.shortName);				trace("Info text for this char: " + Util.getCharObjectFromCharChoiceBtn(_model.currentCharChoiceBtnSelected).infoText)				_infoScrollText.text = Util.getCharObjectFromCharChoiceBtn(_model.currentCharChoiceBtnSelected).infoText;				_infoSwipeToScrollTF.text = Constants.SWIPE_TO_SCROLL_MESSAGE;			}					}						private function onMinusButtonClicked(eve:Event):void{			var targetObjectName:String = ((eve.target as Object).name).split("_")[0];			var targetObjectID:int = ((eve.target as Object).name).split("_")[1];			trace("minus clicked ======="+targetObjectName,targetObjectID);						if (_model.userDataSharedObject.data[targetObjectName + " Level"] == "undefined")			{				trace("headmond level is undefined!");				_model.userDataSharedObject.data[targetObjectName + " Level"] = 0;				_model.userDataSharedObject.flush();			}						if (_model.userDataSharedObject.data[targetObjectName + " Level"] > 0)			{				_model.currentThingToSell = targetObjectName + "Level " + (_model.userDataSharedObject.data[targetObjectName + " Level"] + 1);								for each (var charOb:CharacterObject in _model.characterList)				{					var sellBackPriceBrains:int = charOb.upgradeBrainsSellBackArrayBrains[_model.userDataSharedObject.data[targetObjectName + " Level"]];					var sellBackPriceCoins:int = charOb.upgradeBrainsSellBackArrayCoins[_model.userDataSharedObject.data[targetObjectName + " Level"]];										_model.currentSellBackPriceBrains = sellBackPriceBrains;					_model.currentSellBackPriceCoins = sellBackPriceCoins;										brainsXAmountTF.text = "x " + sellBackPriceBrains;										_buyButtonsSprite.visible = true;					showSellButtons();				}			}					}				private function onPlusButtonClicked(eve:Event):void{			var targetObjectName:String = ((eve.target as Object).name).split("_")[0];			var targetObjectID:int = ((eve.target as Object).name).split("_")[1];			trace("plus clicked ======="+targetObjectName,targetObjectID);			trace("plus clicked on current ChoiceBtn: " + _model.currentCharChoiceBtnSelected.shortName);						var correspondingCharacter:CharacterObject;			for each (var charOb:CharacterObject in _model.characterList)			{				trace("checking _model.characterList object charb ob: " + charOb + " " + charOb.shortName);				trace("checking against_model.currentCharChoiceBtnSelected.shortName : " + _model.currentCharChoiceBtnSelected.shortName);								 				trace("CHECK " + charOb.shortName + " vs " + _model.currentCharChoiceBtnSelected.shortName);				if (charOb.shortName.toString() == _model.currentCharChoiceBtnSelected.shortName.toString())				{					correspondingCharacter = charOb;						trace("selected the corresponding char!!!! " + correspondingCharacter.shortName);				}			}		var buyConstant:String = "";		var sharedObjAttribute:String = "";		var costArray:Array = [];		// Determine SharedObject attribute.			switch(targetObjectName)			{				case "plusButton0":					trace("in 0");					// set the currentThingToBuy as '[shortName] UpgradeBrains Level'					buyConstant = Constants.BUY_UPGRADE_BRAINS;					sharedObjAttribute = correspondingCharacter.shortName + Constants.UPGRADE_BRAINS_LEVEL;					costArray = correspondingCharacter.upgradeBrainsCostArrayBrains;									break;				case "plusButton1":					trace("in 1");					buyConstant = Constants.BUY_UPGRADE_TIME;					sharedObjAttribute = correspondingCharacter.shortName + Constants.UPGRADE_TIME_LEVEL;					costArray = correspondingCharacter.upgradeTimeCostArray;				break;				case "plusButton2":					trace("in 2");					buyConstant = Constants.BUY_UPGRADE_SPECIAL;					sharedObjAttribute = correspondingCharacter.shortName + Constants.UPGRADE_SPECIAL_LEVEL;					costArray = correspondingCharacter.upgradeSpecialCostArray;				break;				default:				break;			}		_model.currentThingToBuy = correspondingCharacter.shortName + buyConstant;		if (_model.userDataSharedObject.data[sharedObjAttribute] == undefined)		{			_model.userDataSharedObject.data[sharedObjAttribute] = 0;			_model.userDataSharedObject.flush();		}						var costToUpgrade:int = costArray[_model.userDataSharedObject.data[sharedObjAttribute]] * correspondingCharacter.upgradeCostMultiplier;					trace("Shared Ob value: " + _model.userDataSharedObject.data[sharedObjAttribute]);			trace("multiplier for : " + correspondingCharacter.shortName + " is: " + correspondingCharacter.upgradeCostMultiplier);		trace("Cost to upgrade: " + costToUpgrade);			// TODO - calculate coin cost				_model.currentCostToBuyBrains = costToUpgrade;		_model.currentCostToBuyCoins = costToUpgrade;									brainsXAmountTF.text = "x " + costToUpgrade;		// Update buy TF and display buy buttons.		showBuyButtons();		_buyButtonsSprite.visible = true;					}						private function showSellButtons():void		{					}				private function showBuyButtons():void		{					}				private function addMarkerIconDotImgs(menuUpgradeBox:Sprite, row:int ):void{						for (var i:int=1; i< 10; i++){								var markerOff:Image = new Image(Assets.getTextureAtlas(3).getTexture("upgradeMarker"+i+"off"));				menuUpgradeBox.addChild(markerOff);								markerOff.pivotX = markerOff.width / 2;				markerOff.pivotY = markerOff.height;				markerOff.x = 32 + (i * markerOff.width)* 1.15;    				markerOff.y = 38;								var markerOn:Image = new Image(Assets.getTextureAtlas(3).getTexture("upgradeMarker"+i+"on"));				menuUpgradeBox.addChild(markerOn);				markerOn.pivotX = markerOff.width / 2;				markerOn.pivotY = markerOff.height;				markerOn.x = 32 + (i * markerOn.width)* 1.15;  				markerOn.y = 38;								menuUpgradeOffIconArr[row].push( markerOff);      //  .push(markerOff);				menuUpgradeOnIconArr[row].push( markerOn);      //  .push(markerOn);				markerOn.visible = false;			}			menuUpgradeBox.x = minusButton.x + minusButton.width;					}						public function onXBtnShopTriggered(e:Event):void		{			trace("clicked shop X");			Util.tweenPopup(_shopPopupSprite, false);			_shopVisible = false;		}								private function addPopupCommonObjects(spriteContainer:Sprite, text:String):void		{						_shopPopupBg = new Image(Assets.getTextureAtlas(4).getTexture("menuPopup"));			spriteContainer.addChild(_shopPopupBg);						var popupLabelTF:TextField = new TextField(200, 70, text, "BM-CooperBlackStd", 40, 0xFFFFFF);			popupLabelTF.x = _shopPopupBg.width/2 - popupLabelTF.width/2;			popupLabelTF.leading = 5;			popupLabelTF.border = false;			popupLabelTF.hAlign = "center";			popupLabelTF.y =  20;			spriteContainer.addChild(popupLabelTF);									var xBtn:MButton = new MButton("", Assets.getTextureAtlas(3).getTexture("xBtn"), 				Assets.getTextureAtlas(3).getTexture("xBtn"), 30);			xBtn.x = 250;			xBtn.y = 30;			xBtn.name = "xBtn";			spriteContainer.addChild(xBtn);					}				private function onRightArrowShopBtnClicked():void {			trace("Right arrow pressed.");			trace("Comparing " + (Math.abs(charChoiceContainer.x) + charChoiceContainerMask.clipRect.width + Constants.SHOP_ARROW_STEP)  + " and " + charChoiceContainer.width);			if (Math.abs(charChoiceContainer.x) + charChoiceContainerMask.clipRect.width + Constants.SHOP_ARROW_STEP > charChoiceContainer.width)			{				charChoiceContainer.x = charChoiceContainerMask.clipRect.width - charChoiceContainer.width;			}			else			{				charChoiceContainer.x -= Constants.SHOP_ARROW_STEP;			}		}				private function onLeftArrowShopBtnClicked():void		{			trace("Left arrow pressed.");			if (charChoiceContainer.x + Constants.SHOP_ARROW_STEP > 0)			{				charChoiceContainer.x = 0;			}			else {				charChoiceContainer.x += Constants.SHOP_ARROW_STEP;			}		}				public function buildConfirmPopup():void		{						_confirmPopupSprite = new Sprite();						addChild(_confirmPopupSprite);			var confirmPopupBg:Image = new Image(Assets.getTextureAtlas(3).getTexture("smallPopupBg"));			_confirmPopupSprite.addChild(confirmPopupBg);						_confirmPopupSprite.pivotX = confirmPopupBg.width * 0.5 ;			_confirmPopupSprite.pivotY = _confirmPopupSprite.height * 0.5;						_confirmPopupSprite.x = Main.GAME_W * 0.5;						trace("c s " + _confirmPopupSprite.x + " and + " + Main.GAME_W);			_confirmPopupSprite.y = Main.GAME_H * 0.55;			_confirmPopupSprite.visible = false;						// Popup Title Label			_confirmPopupTitleTF = new TextField(250, 80, "10", "HoboStd", 23, 0xFFFFFF);			//					_confirmPopupTitleTF.border = true;			_confirmPopupTitleTF.hAlign= "center";			_confirmPopupTitleTF.text = "Confirm Purchase"			_confirmPopupTitleTF.pivotX = _confirmPopupTitleTF.width * 0.5;			_confirmPopupTitleTF.pivotY = _confirmPopupTitleTF.height * 0.35;			_confirmPopupTitleTF.x = confirmPopupBg.width * 0.5;			_confirmPopupTitleTF.y = confirmPopupBg.height * 0.1;			_confirmPopupSprite.addChild(_confirmPopupTitleTF);						// Popup Text Label			_confirmPopupTextTF = new TextField(200, 150, "10", "HoboStd", 17, 0xFFFFFF);			_confirmPopupTextTF.text = "Are you sure you want to buy X for Y?"			_confirmPopupTextTF.pivotY = _confirmPopupTextTF.height * 0.5;			_confirmPopupTextTF.pivotX = _confirmPopupTextTF.width * 0.5;			_confirmPopupTextTF.x = confirmPopupBg.width * 0.5;			_confirmPopupTextTF.y = confirmPopupBg.height * 0.5;			_confirmPopupSprite.addChild(_confirmPopupTextTF);						// yes button			yesBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("YesBtn"), 				Assets.getTextureAtlas(3).getTexture("YesBtn"), 30);			yesBtn.pivotX = yesBtn.width;			yesBtn.pivotY = yesBtn.height * 0.5; 			yesBtn.x = confirmPopupBg.width * .4; 			yesBtn.y = confirmPopupBg.height * 0.88;			_confirmPopupSprite.addChild(yesBtn);			yesBtn.addEventListener(Event.TRIGGERED, onConfirmYesBtnClicked);							// no button			noBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("NoBtn"), 				Assets.getTextureAtlas(3).getTexture("NoBtn"), 30);			noBtn.pivotY = noBtn.height * .5; 			noBtn.pivotX = 0; 			noBtn.x = confirmPopupBg.width * .6; 			noBtn.y = confirmPopupBg.height * 0.88;			_confirmPopupSprite.addChild(noBtn);			noBtn.addEventListener(Event.TRIGGERED, onConfirmNoBtnClicked);							trace("noBtn.height: " + noBtn.height + " yesBtn.height " + yesBtn.height);			trace("noBtn.y: " + noBtn.y + " yesBtn.y " + yesBtn.y);		}	public function buildSearchingForAdPopup():void	{		_searchingforAdPopupSprite = new Sprite();		addChild(_searchingforAdPopupSprite);		_searchingforAdPopupSprite.visible = false;		var _searchingforAdPopupBg:Image = new Image(Assets.getTextureAtlas(3).getTexture("smallPopupBg"));		_searchingforAdPopupSprite.addChild(_searchingforAdPopupBg);		_searchingforAdPopupSprite.pivotX = _searchingforAdPopupBg.width * 0.5 ;		_searchingforAdPopupSprite.pivotY = _searchingforAdPopupSprite.height * 0.5;		_searchingforAdPopupSprite.x = Main.GAME_W * 0.5;		trace("c s " + _searchingforAdPopupSprite.x + " and + " + Main.GAME_W);		_searchingforAdPopupSprite.y = Main.GAME_H * 0.55;		_searchingforAdPopupSprite.visible = false;		// Popup Title Label		var _searchingPopupTitleTF:TextField = new TextField(250, 80, "10", "HoboStd", 23, 0xFFFFFF);		_searchingPopupTitleTF.hAlign= "center";		_searchingPopupTitleTF.text = "Searching"		_searchingPopupTitleTF.pivotX = _searchingPopupTitleTF.width * 0.5;		_searchingPopupTitleTF.pivotY = _searchingPopupTitleTF.height * 0.35;		_searchingPopupTitleTF.x = _searchingforAdPopupBg.width * 0.5;		_searchingPopupTitleTF.y = _searchingforAdPopupBg.height * 0.1;		_searchingforAdPopupSprite.addChild(_searchingPopupTitleTF);		// Popup Text Label		var _searchingPopupTextTF:TextField = new TextField(200, 150, "10", "HoboStd", 17, 0xFFFFFF);		_searchingPopupTextTF.text = "Searching for an ad to play..."		_searchingPopupTextTF.pivotY = _searchingPopupTextTF.height * 0.5;		_searchingPopupTextTF.pivotX = _searchingPopupTextTF.width * 0.5;		_searchingPopupTextTF.x = _searchingforAdPopupBg.width * 0.5;		_searchingPopupTextTF.y = _searchingforAdPopupBg.height * 0.5;		_searchingforAdPopupSprite.addChild(_searchingPopupTextTF);	}	public function buildAdDidntFillPopup():void	{		_adDidntFillPopupSprite = new Sprite();		addChild(_adDidntFillPopupSprite);		_model.adDidntFillPopupSprite = _adDidntFillPopupSprite;		// Background Image		var confirmPopupBg:Image = new Image(Assets.getTextureAtlas(3).getTexture("smallPopupBg"));		_adDidntFillPopupSprite.addChild(confirmPopupBg);		_adDidntFillPopupSprite.pivotX = confirmPopupBg.width * 0.5 ;		_adDidntFillPopupSprite.pivotY = _adDidntFillPopupSprite.height * 0.5;		_adDidntFillPopupSprite.x = Main.GAME_W * 0.5;		trace("c s " + _adDidntFillPopupSprite.x + " and + " + Main.GAME_W);		_adDidntFillPopupSprite.y = Main.GAME_H * 0.55;		_adDidntFillPopupSprite.visible = false;		// Popup Title Label		_adDidntFillTitleTF = new TextField(250, 80, "10", "HoboStd", 23, 0xFFFFFF);		//					_confirmPopupTitleTF.border = true;		_adDidntFillTitleTF.hAlign= "center";		_adDidntFillTitleTF.text = "Confirm Purchase"		_adDidntFillTitleTF.pivotX = _adDidntFillTitleTF.width * 0.5;		_adDidntFillTitleTF.pivotY = _adDidntFillTitleTF.height * 0.35;		_adDidntFillTitleTF.x = confirmPopupBg.width * 0.5;		_adDidntFillTitleTF.y = confirmPopupBg.height * 0.1;		_adDidntFillPopupSprite.addChild(_adDidntFillTitleTF);		// Popup Text Label		_adDidntFillTextTF = new TextField(200, 150, "10", "HoboStd", 17, 0xFFFFFF);		_adDidntFillTextTF.text = "There are no ads available. Special ability has been instantly activated!";		_adDidntFillTextTF.pivotY = _adDidntFillTextTF.height * 0.5;		_adDidntFillTextTF.pivotX = _adDidntFillTextTF.width * 0.5;		_adDidntFillTextTF.x = confirmPopupBg.width * 0.5;		_adDidntFillTextTF.y = confirmPopupBg.height * 0.5;		_adDidntFillPopupSprite.addChild(_adDidntFillTextTF);		// ok button		okBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("OkBtn"),				Assets.getTextureAtlas(3).getTexture("OkBtn"), 30);		okBtn.pivotX = okBtn.width;		okBtn.pivotY = okBtn.height * 0.5;		okBtn.x = confirmPopupBg.width * .5 + okBtn.width * 0.5;		okBtn.y = confirmPopupBg.height * 0.88;		_adDidntFillPopupSprite.addChild(okBtn);		okBtn.addEventListener(Event.TRIGGERED, onAdDidntFillOkBtnClicked);	}	private function onAdDidntFillOkBtnClicked(event:Event):void {		_adDidntFillPopupSprite.visible = false;		_model.blockerQuad.visible = false;		_model.game.activateCurrentCharsSpecial();	}		public  function buildSpecialPopup():void		{			_specialPopupSprite = new Sprite();			_model.specialPopupSprite = _specialPopupSprite;			addChild(_specialPopupSprite);			var _specialPopupBg:Image = new Image(Assets.getTextureAtlas(4).getTexture("menuPopup"));			_specialPopupSprite.addChild(_specialPopupBg);			_specialPopupSprite.scaleX = _specialPopupSprite.scaleY = 0.8;			_specialPopupSprite.x = Main.GAME_W/2 -  _specialPopupSprite.width/2;			_specialPopupSprite.y = Constants.POPUP_Y_OFF_SCREEN;			addPopupCommonObjects(_specialPopupSprite, "Special?");			// yes button			watchConfirmBtn = new MButton("", Assets.getTextureAtlas(3).getTexture("YesBtn"),					Assets.getTextureAtlas(3).getTexture("YesBtn"), 30);			watchConfirmBtn.pivotX = watchConfirmBtn.width;			watchConfirmBtn.pivotY = watchConfirmBtn.height * 0.5;			watchConfirmBtn.x = _specialPopupSprite.width * .5 + watchConfirmBtn.width * 0.5 + 28;			watchConfirmBtn.y = _specialPopupSprite.height + watchConfirmBtn.height * 1.5;			_specialPopupSprite.addChild(watchConfirmBtn);			watchConfirmBtn.addEventListener(Event.TRIGGERED, onWatchConfirmBtnClicked);			var specialText1:TextField = new TextField(_specialPopupBg.width - 45, _specialPopupBg.height/2 + 30, Constants.SPECIAL_TEXT, "HoboStd", 16, 0xFFFFFF);			specialText1.border = false;			specialText1.bold = true;			specialText1.x = 20;			specialText1.y = _specialPopupBg.height * .24;			specialText1.vAlign = VAlign.TOP;;			_specialPopupSprite.addChild(specialText1);			_specialPopupSprite.getChildByName("xBtn").addEventListener(Event.TRIGGERED,  onSpecialPopupXClicked);		}		private function onInfoPopupXClicked(event:Event):void {			Util.tweenPopup(_infoPopupSprite, false);		}		public function buildInfoPopup():void		{			_infoPopupSprite = new Sprite();			_model.infoPopupSprite = _infoPopupSprite;			addChild(_infoPopupSprite);			var _infoPopupBg:Image = new Image(Assets.getTextureAtlas(4).getTexture("menuPopup"));			_infoPopupSprite.addChild(_infoPopupBg);			_infoPopupSprite.scaleX = _infoPopupSprite.scaleY = 0.8;			_infoPopupSprite.x = Main.GAME_W/2 -  _infoPopupSprite.width/2;			_infoPopupSprite.y = Constants.POPUP_Y_OFF_SCREEN;			addPopupCommonObjects(_infoPopupSprite, "Info");			var scrollText2:ScrollText = new ScrollText();			scrollText2.textFormat = new TextFormat("HoboTtfName",13 ,0xFFD700, null, null, null, null, null, null, null, null, null, 1);			scrollText2.embedFonts = true;			scrollText2.antiAliasType = flash.text.AntiAliasType.ADVANCED;			_infoPopupSprite.addChild(scrollText2);			scrollText2.isHTML = true;			scrollText2.width = _infoPopupBg.width * 0.85;			scrollText2.y = 90;			scrollText2.height = _infoPopupBg.height - scrollText2.y - 75;			scrollText2.x = (_infoPopupBg.width - scrollText2.width) / 2;			scrollText2.background = false;			_infoScrollText = scrollText2;			_infoScrollText.text = "Something.."			trace("$# scrollText2.width: " + scrollText2.width + " " + scrollText2.pivotX);			_infoSwipeToScrollTF = new TextField(_infoPopupSprite.width - 25, 30, Constants.SWIPE_TO_SCROLL_MESSAGE, "HoboStd", 13, 0xFFD700);			_infoSwipeToScrollTF.hAlign = "center";			_infoSwipeToScrollTF.x = _infoPopupBg.width * 0.5 - _infoSwipeToScrollTF.width * 0.5;			_infoSwipeToScrollTF.y = _infoPopupBg.height - 50;			_infoSwipeToScrollTF.vAlign = VAlign.TOP;;			_infoPopupSprite.addChild(_infoSwipeToScrollTF);			_infoPopupSprite.getChildByName("xBtn").addEventListener(Event.TRIGGERED,  onInfoPopupXClicked);		}		private function onWatchConfirmBtnClicked(event:Event):void {			// ====== Video Stuff ======			// === OLD VUNGLE API ===//			var videoAdManager:VungleAdManager = new VungleAdManager();//			addChild(videoAdManager);//			videoAdManager.beginAd();			var adColonyAdManager:AdColonyAdManager = AdColonyAdManager.getInstance();			adColonyAdManager.showAd();			// =========================			watchForSpecialButton.alpha = Constants.EXPLODE_BTN_DISABLED_ALPHA;			Util.tweenPopup(_specialPopupSprite, false, false);			_searchingforAdPopupSprite.visible=true;		}		public function buildHelpPopup():void		{			_helpPopupSprite = new Sprite();			_model.helpPopupSprite = _helpPopupSprite;			addChild(_helpPopupSprite);						var _helpPopupBg:Image = new Image(Assets.getTextureAtlas(4).getTexture("menuPopup"));			_helpPopupSprite.addChild(_helpPopupBg);						addChild(_helpPopupSprite);			_helpPopupSprite.scaleX = _helpPopupSprite.scaleY = 0.8;			_helpPopupSprite.x = Main.GAME_W/2 -  _helpPopupSprite.width/2;			_helpPopupSprite.y = Constants.POPUP_Y_OFF_SCREEN;			//			 _helpPopupSprite.y = Constants.POPUP_Y_ON_SCREEN;			addPopupCommonObjects(_helpPopupSprite, "HELP");						var helpText1:TextField = new TextField(_helpPopupBg.width - 45, _helpPopupBg.height/2 + 115, Constants.HELP_TEXT, "HoboStd", 16, 0xFFD700);			helpText1.border = false;			helpText1.bold = true;			helpText1.x = 21;			helpText1.y = 95;			helpText1.vAlign = VAlign.TOP;;			_helpPopupSprite.addChild(helpText1);						_helpPopupSprite.getChildByName("xBtn").addEventListener(Event.TRIGGERED, onHelpXBtnClicked)					}		public function buildCodesPopup():void		{			_codesPopupSprite = new Sprite();			_model.codesPopupSprite = _codesPopupSprite;			addChild(_codesPopupSprite);			var popupBg:Image = new Image(Assets.getTextureAtlas(4).getTexture("menuPopup"));			_codesPopupSprite.addChild(popupBg);			addChild(_codesPopupSprite);			_codesPopupSprite.scaleX = _codesPopupSprite.scaleY = 0.8;			_codesPopupSprite.x = Main.GAME_W/2 -  _codesPopupSprite.width/2;			_codesPopupSprite.y = Constants.POPUP_Y_OFF_SCREEN;			addPopupCommonObjects(_codesPopupSprite, "Codes");			_codesPopupSprite.getChildByName("xBtn").addEventListener(Event.TRIGGERED,  onCodesPopupXClicked);			var codesFeedbackTF:TextField = new TextField(popupBg.width - 45, popupBg.height/2 + 30, "FEEDBACK", "HoboStd", 16, 0xFFD700);			codesFeedbackTF.border = false;			codesFeedbackTF.bold = true;			codesFeedbackTF.x = 20;			codesFeedbackTF.y = popupBg.height * .74;			codesFeedbackTF.vAlign = VAlign.TOP;;			_codesPopupSprite.addChild(codesFeedbackTF);			codesFeedbackTF.visible = false;			_codesPopupSprite.getChildByName("xBtn").addEventListener(Event.TRIGGERED, onHelpXBtnClicked)						trace("Adding input text.")			_codeValidator = new CheatCodeValidator(_model, this);			 // text box			 input = new TextInput();			 input.prompt = "Enter Code";			 input.text = "";			 input.addEventListener(Event.CHANGE, inputChangeHandler );			 input.addEventListener(FeathersEventType.ENTER, inputEnterHandler );			 input.addEventListener(FeathersEventType.SOFT_KEYBOARD_DEACTIVATE, inputDeactivateHandler);			input.addEventListener(FeathersEventType.FOCUS_IN, onFeathersFocusIn)			 input.width = 200;			 input.height = 30;			 input.y = 150;			input.verticalAlign = "center";			 input.x = _codesPopupSprite.width / 2 - input.width / 2 + 30;			trace("input.x: " + input.x);			_codesPopupSprite.addChild( input );			 input.textEditorFactory = function():ITextEditor			 {			 var editor:TextFieldTextEditor = new TextFieldTextEditor();			 editor.textFormat = new TextFormat("HoboTtfName", 25, 0xFFFF00, null, null, null, null, null, "center");			 editor.embedFonts = true;			 return editor;			 }			 input.promptFactory = function():ITextRenderer			 {			 var textRenderer:BitmapFontTextRenderer = new BitmapFontTextRenderer();			 // customize properties and styleshere			 textRenderer.textFormat = new BitmapFontTextFormat("HoboStd", 25, 0xFFFF00, "center");			 return textRenderer;			 }		}	private function onFeathersFocusIn(event:Event):void {		input.prompt = "";		trace("feathers focus in!");	}	private function onCodesPopupXClicked(event:Event):void {		Util.tweenPopup(_codesPopupSprite, false)	}				private function onHelpXBtnClicked():void		{			Util.tweenPopup(_helpPopupSprite, false);		}				private function onConfirmNoBtnClicked(eve:Event):void		{			_confirmPopupSprite.visible = false;		}				private function onConfirmYesBtnClicked():void		{			var brainCost:int = _model.currentCostToBuyBrains;			if (_model.userDataSharedObject.data.brainCount >= brainCost) {				// START WITH NOTHING VISIBLE OR UPGRADE PANEL VISIBLE				_buyButtonsSprite.visible = false;				charLockedImage.visible = false;				_allMenuUpgradeBoxesSP.visible = true;				var correspondingCharacter:CharacterObject;				trace("yes confirmed");				trace("_model.currentThingToBuy: " + _model.currentThingToBuy + ", " + _model.currentCharChoiceBtnSelected.shortName + Constants.BUY_UPGRADE_BRAINS);				for (var i:int = 0; i < Constants.allCharactersMasterList.length; i++) {					var charOb:CharacterObject = Constants.allCharactersMasterList[i];					trace("checking: charOb.shortName " + charOb.shortName + " vs _model.currentCharChoiceBtnSelected.shortName " + _model.currentCharChoiceBtnSelected.shortName);					if (charOb.shortName == _model.currentCharChoiceBtnSelected.shortName);					{						correspondingCharacter = charOb;					}					if (_model.currentThingToBuy == charOb.shortName + Constants.BUY_CHARACTER) {						// hide current character						trace("### hiding the current character: " + _model.currentCharacterOnScreen.shortName);						_model.currentCharacterOnScreen.charSprite.visible = false;						_model.currentCharacterOnScreen = charOb;						trace("shortName: " + charOb.shortName);						trace("Character (" + correspondingCharacter.shortName + ") costs: " + brainCost);						_model.userDataSharedObject.data.brainCount -= brainCost;						_model.userDataSharedObject.data[charOb.shortName + Constants.UNLOCKED] = true;						_model.userDataSharedObject.data[charOb.shortName + Constants.BUY_CHARACTER] = true;						_model.userDataSharedObject.data[_model.currentCharacterOnScreen.shortName + Constants.CURRENTLY_GROWING] = false;						_model.userDataSharedObject.data[_model.currentCharacterOnScreen.shortName + Constants.SPECIAL_ACTIVATED] = false;						trace("seting new index");						_model.userDataSharedObject.flush();						watchForSpecialButton.alpha = 1;						explodeBtn.alpha = 1;						trace("new brains: " + _model.userDataSharedObject.data.brainCount);						brainTF.text = _model.userDataSharedObject.data.brainCount;						trace("Character unlocked");						_model.userDataSharedObject.data.currentCharacterIndex = i;						_model.characterArea.addChild(charOb.charSprite);						charOb.charSprite.x = charOb.ON_SCREEN_X;						charOb.charSprite.y = charOb.ON_SCREEN_Y;						_model.characterList.push(charOb);						trace("PUSHING A CHAROB: " + charOb.shortName);						updateUpgradePanel(charOb.shortName, 0);						updateUpgradePanel(charOb.shortName, 1);						updateUpgradePanel(charOb.shortName, 2);						trace("New characterList: " + _model.characterList);						if (_model.characterList.length == 2)						{							for each (var charObj:CharacterObject in _model.characterList)							{								_charPanningManager.setupForPanning(charObj)							}						}						else						{							_charPanningManager.setupForPanning(charOb)						}					}					else {						trace("Not enough brains to buy Character.");					}					checkForDisplayingMainArrows();				}				for (var k:int = 0; k < _model.characterList.length; k++) {					var charOb2:CharacterObject = _model.characterList[k];					if (_model.currentThingToBuy == charOb2.shortName + Constants.BUY_CHARACTER) {						_model.userDataSharedObject.data.currentCharacterIndex = k;						trace("SETTING currentCharacterIndex: " + (k));						_model.userDataSharedObject.flush();					}				}				_confirmPopupSprite.visible = false;				if (_model.currentThingToBuy == _model.currentCharChoiceBtnSelected.shortName + Constants.BUY_UPGRADE_BRAINS) {					trace("Buying brains upgrade for: " + _model.currentCostToBuyBrains);					if (_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_BRAINS_LEVEL] == undefined) {						_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_BRAINS_LEVEL] = 0;						_model.userDataSharedObject.flush();					}					var brainCost:int = correspondingCharacter.upgradeBrainsCostArrayBrains[							_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_BRAINS_LEVEL]							]					if (_model.userDataSharedObject.data.brainCount >= brainCost) {						_model.userDataSharedObject.data.brainCount -= brainCost;						_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_BRAINS_LEVEL] += 1;						_model.userDataSharedObject.flush();						trace("Adding one to the UPGRADE_BRAINS_LEVEL for " + _model.currentCharChoiceBtnSelected.shortName + ", " + _model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_BRAINS_LEVEL +								": " + _model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_BRAINS_LEVEL]);						brainTF.text = _model.userDataSharedObject.data.brainCount;						updateUpgradePanel(_model.currentCharChoiceBtnSelected.shortName, 0);					}				}				else if (_model.currentThingToBuy == _model.currentCharChoiceBtnSelected.shortName + Constants.BUY_UPGRADE_TIME) {					if (_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_TIME_LEVEL] == undefined) {						_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_TIME_LEVEL] = 0;						_model.userDataSharedObject.flush();					}					trace("Buying time upgrade for: " + _model.currentCostToBuyBrains);					var timeCost:int = correspondingCharacter.upgradeTimeCostArray[							_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_TIME_LEVEL]							]					if (_model.userDataSharedObject.data.brainCount >= timeCost) {						_model.userDataSharedObject.data.brainCount -= timeCost;						_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_TIME_LEVEL] += 1;						_model.userDataSharedObject.flush();						brainTF.text = _model.userDataSharedObject.data.brainCount;						updateUpgradePanel(_model.currentCharChoiceBtnSelected.shortName, 1);					}				}				else if (_model.currentThingToBuy == _model.currentCharChoiceBtnSelected.shortName + Constants.BUY_UPGRADE_SPECIAL) {					if (_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_SPECIAL_LEVEL] == undefined) {						_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_SPECIAL_LEVEL] = 0;						_model.userDataSharedObject.flush();					}					trace("Buying special upgrade for: " + _model.currentCostToBuyBrains);					var specialCost:int = correspondingCharacter.upgradeSpecialCostArray[							_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_SPECIAL_LEVEL]							]					if (_model.userDataSharedObject.data.brainCount >= specialCost) {						_model.userDataSharedObject.data.brainCount -= specialCost;						_model.userDataSharedObject.data[_model.currentCharChoiceBtnSelected.shortName + Constants.UPGRADE_SPECIAL_LEVEL] += 1;						_model.userDataSharedObject.flush();						brainTF.text = _model.userDataSharedObject.data.brainCount;						updateUpgradePanel(_model.currentCharChoiceBtnSelected.shortName, 2);					}				}				else {					trace(" currentThingToBuy: " + _model.currentThingToBuy + " was not an upgrade purchase.");				}			}			trace("VVV : " + _model.currentThingToBuy.substring(0, 21) );		}				private function updateUpgradePanel(shortName:String, row:int):void		{			trace("updateing upgrade panel: " + shortName + " " + row);			var currentUpgradeLevel:int = 0;								var topTF:TextField ;					var bottomTF:TextField;						var correspondingCharacter:CharacterObject;											for each (var charOb:CharacterObject in _model.characterList)					{						if (charOb.shortName == _model.currentCharChoiceBtnSelected.shortName);						{							correspondingCharacter = charOb;						}					}						switch(row)			{				case 0:										trace("upgrade panel sharedObject: " + shortName + "UpgradeBrains Level =" + _model.userDataSharedObject.data[shortName + Constants.UPGRADE_BRAINS_LEVEL]);					currentUpgradeLevel = _model.userDataSharedObject.data[shortName + Constants.UPGRADE_BRAINS_LEVEL];					trace('_model.userDataSharedObject.data[shortName + Constants.UPGRADE_BRAINS_LEVEL] ' + 						_model.userDataSharedObject.data[shortName + Constants.UPGRADE_BRAINS_LEVEL]);					if (_model.userDataSharedObject.data[shortName + Constants.UPGRADE_BRAINS_LEVEL] == undefined)					{						_model.userDataSharedObject.data[shortName + Constants.UPGRADE_BRAINS_LEVEL] = 0;						currentUpgradeLevel = 0;						_model.userDataSharedObject.flush();					}										topTF = _upgradeBrainsPanel.getChildByName("currentLevelValueTF")  as TextField;					bottomTF = _upgradeBrainsPanel.getChildByName("nextLevelValueTF") as TextField;										var currentLevel:int = _model.userDataSharedObject.data[correspondingCharacter.shortName + Constants.UPGRADE_BRAINS_LEVEL]					var brainsMin:int = correspondingCharacter.upgradeBrainsMinArray[currentLevel];					var brainsMax:int = brainsMin + correspondingCharacter.upgradeBrainsVarianceArray[currentLevel];										topTF.text = Constants.BRAINS_UPGRADE_NAME + brainsMin + " - " + brainsMax;					topTF.fontName = "HoboStd";					if (currentLevel < 9)					{						var nextBrainsMin:int = correspondingCharacter.upgradeBrainsMinArray[currentLevel + 1];						var nextBrainsMax:int = nextBrainsMin + correspondingCharacter.upgradeBrainsVarianceArray[currentLevel + 1];											bottomTF.text = "Next: " + nextBrainsMin + " - " + nextBrainsMax;						bottomTF.fontName = "HoboStd";					}					else					{						bottomTF.text = "Next: MAX";						bottomTF.fontName = "HoboStd";					}										break;				case 1:										currentUpgradeLevel = _model.userDataSharedObject.data[shortName + Constants.UPGRADE_TIME_LEVEL];					trace('_model.userDataSharedObject.data[shortName + Constants.UPGRADE_TIME_LEVEL] ' + 						_model.userDataSharedObject.data[shortName + Constants.UPGRADE_TIME_LEVEL]);					if (_model.userDataSharedObject.data[shortName + Constants.UPGRADE_TIME_LEVEL] == undefined)					{						_model.userDataSharedObject.data[shortName + Constants.UPGRADE_TIME_LEVEL] = 0;						currentUpgradeLevel = 0;						_model.userDataSharedObject.flush();					}										trace("in the time case");					topTF = _upgradeTimePanel.getChildByName("currentLevelValueTF")  as TextField;					bottomTF = _upgradeTimePanel.getChildByName("nextLevelValueTF") as TextField;										trace("top and bottom: " + topTF + ", " + bottomTF);										var currentLevel:int = _model.userDataSharedObject.data[correspondingCharacter.shortName + Constants.UPGRADE_TIME_LEVEL]					var regrowthTime:int = correspondingCharacter.upgradeTimeRewardArray[currentLevel];										trace("Level and griwth time: " + currentLevel + ", " + regrowthTime);										topTF.text = Constants.TIME_UPGRADE_NAME + Util.nicelyFormatSeconds(regrowthTime);					if (currentLevel < 9)					{						var nextRegrowthTime:int = correspondingCharacter.upgradeTimeRewardArray[currentLevel + 1];												bottomTF.text = "Next: " + Util.nicelyFormatSeconds(nextRegrowthTime);											}					else					{						bottomTF.text = "Next: MAX";					}					break;								case 2:					currentUpgradeLevel = _model.userDataSharedObject.data[shortName + Constants.UPGRADE_SPECIAL_LEVEL];					trace('_model.userDataSharedObject.data[shortName + Constants.UPGRADE_SPECIAL_LEVEL] ' + 						_model.userDataSharedObject.data[shortName + Constants.UPGRADE_SPECIAL_LEVEL]);					if (_model.userDataSharedObject.data[shortName + Constants.UPGRADE_SPECIAL_LEVEL] == undefined)					{						_model.userDataSharedObject.data[shortName + Constants.UPGRADE_SPECIAL_LEVEL] = 0;						currentUpgradeLevel = 0;						_model.userDataSharedObject.flush();					}											bottomTF = _upgradeSpecialPanel.getChildByName("nextLevelValueTF") as TextField;					topTF = _upgradeSpecialPanel.getChildByName("currentLevelValueTF")  as TextField;															var currentSpecialLevel:int = _model.userDataSharedObject.data[correspondingCharacter.shortName + Constants.UPGRADE_SPECIAL_LEVEL]					var currentSpecialValue:int = correspondingCharacter.upgradeSpecialRewardArray[currentLevel];					if (currentSpecialLevel< 9)					{						var nextSpecialValue:int = correspondingCharacter.upgradeSpecialRewardArray[currentLevel + 1];						bottomTF.text = "Next: " + nextSpecialValue;											}					else					{						bottomTF.text = "Next: MAX";											}										trace("_upgradeTimePanel " + _upgradeTimePanel);					topTF.text = "Special: " + currentSpecialValue;					break;								default:										trace("UNKnoWN rOW! " + row);					break;			}									for (var i:int = 0; i < 9; i++)			{				trace("checking against currentUpgradeLevel: " + i + "vs " + currentUpgradeLevel);								if (i < currentUpgradeLevel)				{					trace("show On icon: " + i);					menuUpgradeOffIconArr[row][i].visible = false;					menuUpgradeOnIconArr[row][i].visible = true;									}				else 				{					menuUpgradeOffIconArr[row][i].visible = true;					menuUpgradeOnIconArr[row][i].visible = false;									}							}			trace("display upgradeDotsCorrectly: " );		}				private function showJustBoughtCharacter(nameOfCharToShow:String):void		{						trace("just bought: " + nameOfCharToShow);			for each (var i:int in _model.characterList)			{				var charOb:CharacterObject = _model.characterList[i];								if (charOb.charName == nameOfCharToShow)				{					trace("match: " + charOb.charName + " " + charOb.charSprite);					charOb.charSprite.visible = true;					charOb.charSprite.x = charOb.ON_SCREEN_X;					charOb.charSprite.y = charOb.ON_SCREEN_Y;				}				else				{						trace("not match - hiding headmond" + charOb.charSprite);					charOb.charSprite.visible = false;									}			}		}				public function displayCurrentCharacter():void		{			if (_model.userDataSharedObject.data[Constants.CHAR_CURRENTLY_ON_SCREEN] == undefined)			{				_model.userDataSharedObject.data[Constants.CHAR_CURRENTLY_ON_SCREEN] = "headmond";				_model.userDataSharedObject.flush();			}			for (var i:int = 0; i < _model.characterList.length; i++)			{				var currentCharOb:CharacterObject = _model.characterList[i];				trace("%$ Looping through char list: " + i + " " + _model.characterList[i].shortName);				if (currentCharOb.shortName == _model.userDataSharedObject.data[Constants.CHAR_CURRENTLY_ON_SCREEN])				{					_model.currentCharacterOnScreen = currentCharOb;				}			}			if (_model.currentCharacterOnScreen != null)			{				_model.currentCharacterOnScreen.visible = true;			}		}		private function onSpecialPopupXClicked(event:Event):void {			Util.tweenPopup(_specialPopupSprite, false);		}		public function buildBlockerQuad():void {			_model.blockerQuad = new Quad(Main.GAME_W, Main.GAME_H, 0x000000, true);			_model.blockerQuad.alpha = 0.2;			_model.blockerQuad.visible = false;			addChild(_model.blockerQuad);		}	public function addFloaters():void {		// Brains label textfield.		brainsFloaterTF = new TextField(80, 24, "10", "HoboStd", 16, 0x111111);		brainsFloaterTF.border = false;		brainsFloaterTF.hAlign = "left";		brainsFloaterTF.x = 45;		brainsFloaterTF.y = brainTF.y + FLOATER_SPACER_Y;		brainsLabelSprite.addChild(brainsFloaterTF);		brainsFloaterTF.visible = false;		// Bonus Brains label textfield.		bonusBrainsFloaterTF = new TextField(80, 24, "10", "HoboStd", 16, 0x111111);		bonusBrainsFloaterTF.border = false;		bonusBrainsFloaterTF.hAlign = "left";		bonusBrainsFloaterTF.x = 85;		bonusBrainsFloaterTF.y = brainTF.y + FLOATER_SPACER_Y;		brainsLabelSprite.addChild(bonusBrainsFloaterTF);		bonusBrainsFloaterTF.visible = false;	}	public function addBubblePopups():void {		_bubblePopupManager = BubblePopupManager.getInstance();		_bubblePopupManager.createBubblePopups();		addChild(_bubblePopupManager);	}}	}